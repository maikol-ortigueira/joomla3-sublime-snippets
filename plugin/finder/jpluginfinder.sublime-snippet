<snippet>
	<content><![CDATA[// Load the base adapter.
require_once JPATH_ADMINISTRATOR . '/components/com_finder/helpers/indexer/adapter.php';

/**
 * Finder adapter for com_${TM_COMPONENT/(.+)/\L\1/g}.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  ${1/(.+)/\u\1/g}.${2/(.+)/\L\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class PlgFinder${1:${TM_FILENAME/(.*?)(\..+)/\u$1/}} extends FinderIndexerAdapter
{
	/**
	 * The plugin identifier.
	 *
	 * @var    string
	 * @since  $TM_VERSION
	 */
	protected \$context = '${TM_COMPONENT/(.+)/\u\1/g}';

	/**
	 * The extension name.
	 *
	 * @var    string
	 * @since  $TM_VERSION
	 */
	protected \$extension = 'com_${TM_COMPONENT/(.+)/\L\1/g}';

	/**
	 * The sublayout to use when rendering the results.
	 *
	 * @var    string
	 * @since  $TM_VERSION
	 */
	protected \$layout = '${2:${TM_SINGULAR/(.+)/\L\1/g}}';

	/**
	 * The type of content that the adapter indexes.
	 *
	 * @var    string
	 * @since  $TM_VERSION
	 */
	protected \$type_title = '${2/(.+)/\u\1/g}';

	/**
	 * The table name.
	 *
	 * @var    string
	 * @since  $TM_VERSION
	 */
	protected \$table = '#__${TM_COMPONENT/(.+)/\L\1/g}';

	/**
	 * Load the language file on instantiation.
	 *
	 * @var    boolean
	 * @since  3.1
	 */
	protected \$autoloadLanguage = true;

	/**
	 * Method to update the item link information when the item category is
	 * changed. This is fired when the item category is published or unpublished
	 * from the list view.
	 *
	 * @param   string   \$extension  The extension whose category has been updated.
	 * @param   array    \$pks        A list of primary key ids of the content that has changed state.
	 * @param   integer  \$value      The value of the state that the content has been changed to.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	public function onFinderCategoryChangeState(\$extension, \$pks, \$value)
	{
		// Make sure we're handling com_${TM_COMPONENT/(.+)/\L\1/g} categories.
		if (\$extension == 'com_${TM_COMPONENT/(.+)/\L\1/g}')
		{
			\$this->categoryStateChange(\$pks, \$value);
		}
	}

	/**
	 * Method to remove the link information for items that have been deleted.
	 *
	 * @param   string  \$context  The context of the action being performed.
	 * @param   JTable  \$table    A JTable object containing the record to be deleted.
	 *
	 * @return  boolean  True on success.
	 *
	 * @since   $TM_VERSION
	 * @throws  Exception on database error.
	 */
	public function onFinderAfterDelete(\$context, \$table)
	{
		if (\$context == 'com_${TM_COMPONENT/(.+)/\L\1/g}.${2/(.+)/\L\1/g}')
		{
			\$id = \$table->id;
		}
		elseif (\$context == 'com_finder.index')
		{
			\$id = \$table->link_id;
		}
		else
		{
			return true;
		}

		// Remove the items.
		return \$this->remove(\$id);
	}

	/**
	 * Method to determine if the access level of an item changed.
	 *
	 * @param   string   \$context  The context of the content passed to the plugin.
	 * @param   JTable   \$row      A JTable object.
	 * @param   boolean  \$isNew    If the content has just been created.
	 *
	 * @return  boolean  True on success.
	 *
	 * @since   $TM_VERSION
	 * @throws  Exception on database error.
	 */
	public function onFinderAfterSave(\$context, \$row, \$isNew)
	{
		// We only want to handle ${3:${2/(.+)/\L\1/g}s} here.
		if (\$context == 'com_${TM_COMPONENT/(.+)/\L\1/g}.${2/(.+)/\L\1/g}' || \$context == 'com_${TM_COMPONENT/(.+)/\L\1/g}.form')
		{
			// Check if the access levels are different.
			if (!\$isNew && \$this->old_access != \$row->access)
			{
				// Process the change.
				\$this->itemAccessChange(\$row);
			}

			// Reindex the item.
			\$this->reindex(\$row->id);
		}

		// Check for access changes in the category.
		if (\$context == 'com_categories.category')
		{
			// Check if the access levels are different.
			if (!\$isNew && \$this->old_cataccess != \$row->access)
			{
				\$this->categoryAccessChange(\$row);
			}
		}

		return true;
	}

	/**
	 * Method to reindex the link information for an item that has been saved.
	 * This event is fired before the data is actually saved so we are going
	 * to queue the item to be indexed later.
	 *
	 * @param   string   \$context  The context of the content passed to the plugin.
	 * @param   JTable   \$row      A JTable object.
	 * @param   boolean  \$isNew    If the content is just about to be created.
	 *
	 * @return  boolean  True on success.
	 *
	 * @since   $TM_VERSION
	 * @throws  Exception on database error.
	 */
	public function onFinderBeforeSave(\$context, \$row, \$isNew)
	{
		// We only want to handle ${3/(.+)/\L\1/g} here.
		if (\$context == 'com_${TM_COMPONENT/(.+)/\L\1/g}.${2/(.+)/\L\1/g}' || \$context == 'com_${TM_COMPONENT/(.+)/\L\1/g}.form')
		{
			// Query the database for the old access level if the item isn't new.
			if (!\$isNew)
			{
				\$this->checkItemAccess(\$row);
			}
		}

		// Check for access levels from the category.
		if (\$context == 'com_categories.category')
		{
			// Query the database for the old access level if the item isn't new.
			if (!\$isNew)
			{
				\$this->checkCategoryAccess(\$row);
			}
		}

		return true;
	}

	/**
	 * Method to update the link information for items that have been changed
	 * from outside the edit screen. This is fired when the item is published,
	 * unpublished, archived, or unarchived from the list view.
	 *
	 * @param   string   \$context  The context for the content passed to the plugin.
	 * @param   array    \$pks      A list of primary key ids of the content that has changed state.
	 * @param   integer  \$value    The value of the state that the content has been changed to.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	public function onFinderChangeState(\$context, \$pks, \$value)
	{
		// We only want to handle ${3/(.+)/\L\1/g} here.
		if (\$context == 'com_${TM_COMPONENT/(.+)/\L\1/g}.${2/(.+)/\L\1/g}' || \$context == 'com_${TM_COMPONENT/(.+)/\L\1/g}.form')
		{
			\$this->itemStateChange(\$pks, \$value);
		}

		// Handle when the plugin is disabled.
		if (\$context == 'com_plugins.plugin' && \$value === 0)
		{
			\$this->pluginDisable(\$pks);
		}
	}

	/**
	 * Method to index an item. The item must be a FinderIndexerResult object.
	 *
	 * @param   FinderIndexerResult  \$item    The item to index as an FinderIndexerResult object.
	 * @param   string               \$format  The item format.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 * @throws  Exception on database error.
	 */
	protected function index(FinderIndexerResult \$item, \$format = 'html')
	{
		\$item->setLanguage();

		// Check if the extension is enabled.
		if (JComponentHelper::isEnabled(\$this->extension) == false)
		{
			return;
		}

		// Initialize the item parameters.
		\$registry = new JRegistry;
		\$registry->loadString(\$item->params);
		\$item->params = JComponentHelper::getParams('com_${TM_COMPONENT/(.+)/\L\1/g}', true);
		\$item->params->merge(\$registry);

		\$registry = new JRegistry;
		\$registry->loadString(\$item->metadata);
		\$item->metadata = \$registry;

		// Trigger the onContentPrepare event.
		\$item->summary = FinderIndexerHelper::prepareContent(\$item->summary, \$item->params);

		// Build the necessary route and path information.
		\$item->url   = \$this->getURL(\$item->id, \$this->extension, \$this->layout);
		\$item->route = ${TM_COMPONENT/(.+)/\u\1/g}HelperRoute::get${2/(.+)/\u\1/g}Route(\$item->slug, \$item->catslug, \$item->language);
		\$item->path  = FinderIndexerHelper::getContentPath(\$item->route);

		// Get the menu title if it exists.
		\$title = \$this->getItemMenuTitle(\$item->url);

		// Adjust the title if necessary.
		if (!empty(\$title) && \$this->params->get('use_menu_title', true))
		{
			\$item->title = \$title;
		}

		// Add the meta-author.
		\$item->metaauthor = \$item->metadata->get('author');

		// Add the meta-data processing instructions.
		\$item->addInstruction(FinderIndexer::META_CONTEXT, 'metakey');
		\$item->addInstruction(FinderIndexer::META_CONTEXT, 'metadesc');
		\$item->addInstruction(FinderIndexer::META_CONTEXT, 'metaauthor');
		\$item->addInstruction(FinderIndexer::META_CONTEXT, 'author');
		\$item->addInstruction(FinderIndexer::META_CONTEXT, 'created_by_alias');

		// Translate the state. ${3/(.+)/\u\1/g} should only be published if the category is published.
		\$item->published = \$this->translateState(\$item->published, \$item->cat_state);

		// Add the type taxonomy data.
		\$item->addTaxonomy('Type', '${2/(.+)/\u\1/g}');

		// Add the author taxonomy data.
		if (!empty(\$item->author) || !empty(\$item->created_by_alias))
		{
			\$item->addTaxonomy('Author', !empty(\$item->created_by_alias) ? \$item->created_by_alias : \$item->author);
		}

		// Add the category taxonomy data.
		\$item->addTaxonomy('Category', \$item->category, \$item->cat_state, \$item->cat_access);

		// Add the language taxonomy data.
		\$item->addTaxonomy('Language', \$item->language);

		// Get content extras.
		FinderIndexerHelper::getContentExtras(\$item);

		// Index the item.
		\$this->indexer->index(\$item);
	}

	/**
	 * Method to setup the indexer to be run.
	 *
	 * @return  boolean  True on success.
	 *
	 * @since   $TM_VERSION
	 */
	protected function setup()
	{
		// Load dependent classes.
		include_once JPATH_SITE . '/components/com_${TM_COMPONENT/(.+)/\L\1/g}/helpers/route.php';

		return true;
	}

	/**
	 * Method to get the SQL query used to retrieve the list of content items.
	 *
	 * @param   mixed  \$query  A JDatabaseQuery object or null.
	 *
	 * @return  JDatabaseQuery  A database object.
	 *
	 * @since   $TM_VERSION
	 */
	protected function getListQuery(\$query = null)
	{
		// Initialiase variables.
		\$db = JFactory::getDbo();

		// Check if we can use the supplied SQL query.
		\$query = \$query instanceof JDatabaseQuery ? \$query : \$db->getQuery(true)
			->select('a.id, a.${4:title}, a.alias, a.description AS summary')
			->select('a.published, a.catid, a.created AS start_date, a.created_by')
			->select('a.created_by_alias, a.modified, a.modified_by, a.params')
			->select('a.metakey, a.metadesc, a.metadata, a.language, a.access, a.version, a.ordering')
			->select('a.publish_up AS publish_start_date, a.publish_down AS publish_end_date')
			->select('c.title AS category, c.published AS cat_state, c.access AS cat_access');

		// Handle the alias CASE WHEN portion of the query.
		\$case_when_item_alias = ' CASE WHEN ';
		\$case_when_item_alias .= \$query->charLength('a.alias', '!=', '0');
		\$case_when_item_alias .= ' THEN ';
		\$${TM_COMPONENT/(.)(.+)/\L\1/g}_id = \$query->castAsChar('a.id');
		\$case_when_item_alias .= \$query->concatenate(array(\$${TM_COMPONENT/(.)(.+)/\L\1/g}_id, 'a.alias'), ':');
		\$case_when_item_alias .= ' ELSE ';
		\$case_when_item_alias .= \$${TM_COMPONENT/(.)(.+)/\L\1/g}_id . ' END as slug';
		\$query->select(\$case_when_item_alias);

		\$case_when_category_alias = ' CASE WHEN ';
		\$case_when_category_alias .= \$query->charLength('c.alias', '!=', '0');
		\$case_when_category_alias .= ' THEN ';
		\$c_id = \$query->castAsChar('c.id');
		\$case_when_category_alias .= \$query->concatenate(array(\$c_id, 'c.alias'), ':');
		\$case_when_category_alias .= ' ELSE ';
		\$case_when_category_alias .= \$c_id . ' END as catslug';
		\$query->select(\$case_when_category_alias)

			->select('u.name AS author')
			->from('#__${TM_COMPONENT/(.+)/\L\1/g}$5 AS a')
			->join('LEFT', '#__categories AS c ON c.id = a.catid')
			->join('LEFT', '#__users AS u ON u.id = a.created_by');

		return \$query;
	}
}

]]></content>
	<tabTrigger>jpluginfinder</tabTrigger>
	<scope>source.php</scope>
</snippet>
