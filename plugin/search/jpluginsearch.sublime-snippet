<snippet>
	<content><![CDATA[// Load dependent classes.
require_once JPATH_SITE . '/components/com_${TM_COMPONENT/(.+)/\L\1/g}/router.php';

/**
 * ${TM_COMPONENT/(.+)/\u\1/g} Search plugin.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  Search.${1/(.+)/\u\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class PlgSearch${1:${TM_FILENAME/(.*?)(\..+)/\u$1/}} extends JPlugin
{
	/**
	 * Load the language file on instantiation.
	 *
	 * @var     boolean
	 * @since   $TM_VERSION
	 */
	protected \$autoloadLanguage = true;

	/**
	 * Faq Search Areas method.
	 *
	 * @return  array  An array of search areas.
	 *
	 * @since   $TM_VERSION
	 */
	public function onContentSearchAreas()
	{
		static \$areas = array(
			'${2:${1/(.+)/\L\1/g}}' => 'PLG_SEARCH_${1/(.+)/\U\1/g}_${2/(.+)/\U\1/g}'
		);

		return \$areas;
	}

	/**
	 * Faq Search method.
	 *
	 * The sql must return the following fields that are used in a common display
	 * routine: href, title, section, created, text, browsernav.
	 *
	 * @param   string  \$text      Target search string.
	 * @param   string  \$phrase    Mathcing option, exact|any|all.
	 * @param   string  \$ordering  Ordering option, newest|oldest|popular|alpha|category.
	 * @param   mixed   \$areas     An array if the search it to be restricted to areas, null if search all.
	 *
	 * @return  string
	 *
	 * @since   $TM_VERSION
	 */
	public function onContentSearch(\$text, \$phrase = '', \$ordering = '', \$areas = null)
	{
		// Initialiase variables.
		\$db     = JFactory::getDbo();
		\$app    = JFactory::getApplication();
		\$user   = JFactory::getUser();
		\$groups = implode(',', \$user->getAuthorisedViewLevels());
		\$tag    = JFactory::getLanguage()->getTag();

		// Load dependent classes.
		require_once JPATH_SITE . '/components/com_${TM_COMPONENT/(.+)/\L\1/g}/helpers/route.php';
		require_once JPATH_ADMINISTRATOR . '/components/com_search/helpers/search.php';

		\$searchText = \$text;

		if (is_array(\$areas))
		{
			if (!array_intersect(\$areas, array_keys(\$this->onContentSearchAreas())))
			{
				return array();
			}
		}

		\$sContent  = \$this->params->get('search_content', 1);
		\$sArchived = \$this->params->get('search_archived', 1);
		\$limit     = \$this->params->def('search_limit', 50);

		\$nullDate  = \$db->getNullDate();
		\$date      = JFactory::getDate();
		\$now       = \$date->toSql();

		\$text      = trim(\$text);

		if (\$text == '')
		{
			return array();
		}

		switch (\$phrase)
		{
			case 'exact':
				\$text      = \$db->quote('%' . \$db->escape(\$text, true) . '%', false);
				\$wheres2   = array();
				\$wheres2[] = 'a.${3:title} LIKE ' . \$text;
				\$wheres2[] = 'a.description LIKE ' . \$text;
				\$wheres2[] = 'a.metakey LIKE ' . \$text;
				\$wheres2[] = 'a.metadesc LIKE ' . \$text;
				\$where     = '(' . implode(') OR (', \$wheres2) . ')';
				break;

			case 'all':
			case 'any':
			default:
				\$words  = explode(' ', \$text);
				\$wheres = array();

				foreach (\$words as \$word)
				{
					\$word      = \$db->quote('%' . \$db->escape(\$word, true) . '%', false);
					\$wheres2   = array();
					\$wheres2[] = 'a.${3/(.+)/\L\1/g} LIKE ' . \$word;
					\$wheres2[] = 'a.description LIKE ' . \$word;
					\$wheres2[] = 'a.metakey LIKE ' . \$word;
					\$wheres2[] = 'a.metadesc LIKE ' . \$word;
					\$wheres[]  = implode(' OR ', \$wheres2);
				}

				\$where = '(' . implode((\$phrase == 'all' ? ') AND (' : ') OR ('), \$wheres) . ')';
				break;
		}

		switch (\$ordering)
		{
			case 'oldest':
				\$order = 'a.created ASC';
				break;

			case 'popular':
				\$order = 'a.hits DESC';
				break;

			case 'alpha':
				\$order = 'a.${3/(.+)/\L\1/g} ASC';
				break;

			case 'category':
				\$order = 'c.title ASC, a.${3/(.+)/\L\1/g} ASC';
				break;

			case 'newest':
			default:
				\$order = 'a.created DESC';
				break;
		}

		\$rows  = array();
		\$query = \$db->getQuery(true);

		// Search ${1/(.+)/\L\1/g}.
		if (\$sContent && \$limit > 0)
		{
			\$query->clear();

			// Sqlsrv changes.
			\$case_when = ' CASE WHEN ';
			\$case_when .= \$query->charLength('a.alias', '!=', '0');
			\$case_when .= ' THEN ';
			\$${TM_COMPONENT/(.)(.+)/\L\1/g}_id = \$query->castAsChar('a.id');
			\$case_when .= \$query->concatenate(array(\$${TM_COMPONENT/(.)(.+)/\L\1/g}_id, 'a.alias'), ':');
			\$case_when .= ' ELSE ';
			\$case_when .= \$${TM_COMPONENT/(.)(.+)/\L\1/g}_id . ' END as slug';

			\$case_when1 = ' CASE WHEN ';
			\$case_when1 .= \$query->charLength('c.alias', '!=', '0');
			\$case_when1 .= ' THEN ';
			\$c_id = \$query->castAsChar('c.id');
			\$case_when1 .= \$query->concatenate(array(\$c_id, 'c.alias'), ':');
			\$case_when1 .= ' ELSE ';
			\$case_when1 .= \$c_id . ' END as catslug';

			\$query->select('a.${3/(.+)/\L\1/g} AS title, a.description AS text, a.metadesc, a.metakey, a.created AS created')
				->select('c.title AS section, ' . \$case_when . ',' . \$case_when1 . ', ' . '\'2\' AS browsernav')
				->from('#__${TM_COMPONENT/(.+)/\L\1/g}$4 AS a')
				->join('INNER', '#__categories AS c ON c.id=a.catid')
				->where(
					'(' . \$where . ') AND a.published=1 AND c.published = 1 AND a.access IN (' . \$groups . ') '
						. 'AND c.access IN (' . \$groups . ') '
						. 'AND (a.publish_up = ' . \$db->quote(\$nullDate) . ' OR a.publish_up <= ' . \$db->quote(\$now) . ') '
						. 'AND (a.publish_down = ' . \$db->quote(\$nullDate) . ' OR a.publish_down >= ' . \$db->quote(\$now) . ')'
				)
				->group('a.id, a.${3/(.+)/\L\1/g}, a.metadesc, a.metakey, a.created, a.description, c.title, a.alias, c.alias, c.id')
				->order(\$order);

			// Filter by language.
			if (\$app->isSite() && JLanguageMultilang::isEnabled())
			{
				\$query->where('a.language in (' . \$db->quote(\$tag) . ',' . \$db->quote('*') . ')')
					->where('c.language in (' . \$db->quote(\$tag) . ',' . \$db->quote('*') . ')');
			}

			\$db->setQuery(\$query, 0, \$limit);
			\$list  = \$db->loadObjectList();
			\$limit -= count(\$list);

			if (isset(\$list))
			{
				foreach (\$list as \$key => \$item)
				{
					\$list[\$key]->href = ${TM_COMPONENT/(.+)/\u\1/g}HelperRoute::get${5/(.+)/\u\1/g}Route(\$item->slug, \$item->catslug);
				}
			}

			\$rows[] = \$list;
		}

		// Search archived content.
		if (\$sArchived && \$limit > 0)
		{
			\$query->clear();

			// Sqlsrv changes.
			\$case_when = ' CASE WHEN ';
			\$case_when .= \$query->charLength('a.alias', '!=', '0');
			\$case_when .= ' THEN ';
			\$${TM_COMPONENT/(.)(.+)/\L\1/g}_id = \$query->castAsChar('a.id');
			\$case_when .= \$query->concatenate(array(\$${TM_COMPONENT/(.)(.+)/\L\1/g}_id, 'a.alias'), ':');
			\$case_when .= ' ELSE ';
			\$case_when .= \$${TM_COMPONENT/(.)(.+)/\L\1/g}_id . ' END as slug';

			\$case_when1 = ' CASE WHEN ';
			\$case_when1 .= \$query->charLength('c.alias', '!=', '0');
			\$case_when1 .= ' THEN ';
			\$c_id = \$query->castAsChar('c.id');
			\$case_when1 .= \$query->concatenate(array(\$c_id, 'c.alias'), ':');
			\$case_when1 .= ' ELSE ';
			\$case_when1 .= \$c_id . ' END as catslug';

			\$query->select(
				'a.${3/(.+)/\L\1/g} AS title, a.description AS text, a.metadesc, a.metakey, a.created AS created, '
					. \$case_when . ',' . \$case_when1 . ', '
					. 'c.title AS section, \'2\' AS browsernav'
			);

			\$query->from('#__${TM_COMPONENT/(.+)/\L\1/g} AS a')
				->join('INNER', '#__categories AS c ON c.id=a.catid AND c.access IN (' . \$groups . ')')
				->where(
					'(' . \$where . ') AND a.published = 2 AND c.published = 1 AND a.access IN (' . \$groups
						. ') AND c.access IN (' . \$groups . ') '
						. 'AND (a.publish_up = ' . \$db->quote(\$nullDate) . ' OR a.publish_up <= ' . \$db->quote(\$now) . ') '
						. 'AND (a.publish_down = ' . \$db->quote(\$nullDate) . ' OR a.publish_down >= ' . \$db->quote(\$now) . ')'
				)
				->order(\$order);

			// Filter by language.
			if (\$app->isSite() && JLanguageMultilang::isEnabled())
			{
				\$query->where('a.language in (' . \$db->quote(\$tag) . ',' . \$db->quote('*') . ')')
					->where('c.language in (' . \$db->quote(\$tag) . ',' . \$db->quote('*') . ')');
			}

			\$db->setQuery(\$query, 0, \$limit);
			\$list3 = \$db->loadObjectList();

			// Find an itemid for archived to use if there isn't another one.
			\$item = \$app->getMenu()->getItems('link', 'index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&view=archive', true);
			\$itemid = isset(\$item->id) ? '&Itemid=' . \$item->id : '';

			if (isset(\$list3))
			{
				foreach (\$list3 as \$key => \$item)
				{
					\$date              = JFactory::getDate(\$item->created);
					\$created_month     = \$date->format("n");
					\$created_year      = \$date->format("Y");
					\$list3[\$key]->href = JRoute::_('index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&view=archive&year=' . \$created_year . '&month=' . \$created_month . \$itemid);
				}
			}

			\$rows[] = \$list3;
		}

		\$results = array();

		if (count(\$rows))
		{
			foreach (\$rows as \$row)
			{
				\$new_row = array();

				foreach (\$row as \$${5/(.+)/\L\1/g})
				{
					if (SearchHelper::checkNoHTML(\$${5/(.+)/\L\1/g}, \$searchText, array('text', 'title', 'metadesc', 'metakey')))
					{
						\$new_row[] = \$${5:${2/(.+)(s\b)/\L\1/g}};
					}
				}

				\$results = array_merge(\$results, (array) \$new_row);
			}
		}

		return \$results;
	}
}

]]></content>
	<tabTrigger>jpluginsearch</tabTrigger>
	<scope>source.php</scope>
</snippet>
