<snippet>
	<content><![CDATA[require_once JPATH_SITE . '/components/com_${TM_COMPONENT/(.+)/\L\1/g}/helpers/route.php';

/**
 * ${1/(.+)/\u\1/g} Search plugin.
 *
 * @package     Joomla.Plugin
 * @subpackage  Search.${1/(.+)/\L\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class PlgSearch${1:${TM_COMPONENT/(.+)/\u\1/g}} extends JPlugin
{
	/**
	 * Load the language file on instantiation.
	 *
	 * @var     boolean
	 * @since   $TM_VERSION
	 */
	protected \$autoloadLanguage = true;

	/**
	 * ${2:${1/(.+)(s\b)/\u\1/g}} Search Areas method.
	 *
	 * @return  array An array of search areas
	 *
	 * @since   $TM_VERSION
	 */
	public function onContentSearchAreas()
	{
		static \$areas = array(
			'${1/(.+)/\L\1/g}' => 'PLG_SEARCH_${1/(.+)/\U\1/g}_${1/(.+)/\U\1/g}'
		);

		return \$areas;
	}

	/**
	 * ${2/(.+)/\u\1/g} Search method.
	 *
	 * The sql must return the following fields that are used in a common display
	 * routine: href, title, section, created, text, browsernav.
	 *
	 * @param   string  \$text      Target search string.
	 * @param   string  \$phrase    mathcing option, exact|any|all.
	 * @param   string  \$ordering  ordering option, newest|oldest|popular|alpha.
	 * @param   mixed   \$areas     An array if the search it to be restricted to areas, null if search all.
	 *
	 * @return  string
	 *
	 * @since   $TM_VERSION
	 */
	public function onContentSearch(\$text, \$phrase='', \$ordering='', \$areas=null)
	{
		// Initialiase variables.
		\$db     = JFactory::getDbo();
		\$app    = JFactory::getApplication();
		\$user   = JFactory::getUser();
		\$groups = implode(',', \$user->getAuthorisedViewLevels());

		\$searchText = \$text;

		if (is_array(\$areas))
		{
			if (!array_intersect(\$areas, array_keys(\$this->onContentSearchAreas())))
			{
				return array();
			}
		}

		\$sContent  = \$this->params->get('search_content', 1);
		\$sArchived = \$this->params->get('search_archived', 1);
		\$limit     = \$this->params->def('search_limit', 50);
		\$state = array();

		if (\$sContent)
		{
			\$state[] = 1;
		}

		if (\$sArchived)
		{
			\$state[] = 2;
		}

		\$text = trim(\$text);

		if (\$text == '')
		{
			return array();
		}

		\$section = JText::_('PLG_SEARCH_${1/(.+)/\U\1/g}');
		\$wheres  = array();

		switch (\$phrase)
		{
			case 'exact':
				\$text      = \$db->quote('%' . \$db->escape(\$text, true) . '%', false);
				\$wheres2   = array();
				\$wheres2[] = 'a.description LIKE ' . \$text;
				\$wheres2[] = 'a.${3:title} LIKE ' . \$text;
				\$where     = '(' . implode(') OR (', \$wheres2) . ')';
				break;

			case 'all':
			case 'any':
			default:
				\$words  = explode(' ', \$text);
				\$wheres = array();

				foreach (\$words as \$word)
				{
					\$word      = \$db->quote('%' . \$db->escape(\$word, true) . '%', false);
					\$wheres2   = array();
					\$wheres2[] = 'a.description LIKE ' . \$word;
					\$wheres2[] = 'a.${3/(.+)/\L\1/g} LIKE ' . \$word;
					\$wheres[]  = implode(' OR ', \$wheres2);
				}

				\$where = '(' . implode((\$phrase == 'all' ? ') AND (' : ') OR ('), \$wheres) . ')';
				break;
		}

		switch (\$ordering)
		{
			case 'oldest':
				\$order = 'a.created ASC';
				break;

			case 'popular':
				\$order = 'a.hits DESC';
				break;

			case 'alpha':
				\$order = 'a.${3/(.+)/\L\1/g} ASC';
				break;

			case 'newest':
			default:
				\$order = 'a.created DESC';
		}

		\$return = array();

		if (!empty(\$state))
		{
			\$query = \$db->getQuery(true);

			// Sqlsrv changes.
			\$case_when = ' CASE WHEN ';
			\$case_when .= \$query->charLength('a.alias', '!=', '0');
			\$case_when .= ' THEN ';
			\$${TM_COMPONENT/(.)(.+)/\L\1/g}_id = \$query->castAsChar('a.id');
			\$case_when .= \$query->concatenate(array(\$${TM_COMPONENT/(.)(.+)/\L\1/g}_id, 'a.alias'), ':');
			\$case_when .= ' ELSE ';
			\$case_when .= \$${TM_COMPONENT/(.)(.+)/\L\1/g}_id . ' END as slug';

			\$query->select('a.${3/(.+)/\L\1/g} AS title, a.description AS text, a.created AS created, '
				. \$case_when . ', '
				. \$db->quote(\$section) . ' AS section, \'2\' AS browsernav')
				->from(\$db->quoteName('#__${TM_COMPONENT/(.+)/\L\1/g}${4:_${1/(.+)/\L\1/g}}') . ' AS a')
				->where('(' . \$where . ')' . ' AND a.published in (' . implode(', ', \$state) . ')')
				->order(\$order);

			// Filter by language.
			if (\$app->isSite() && \$app->getLanguageFilter())
			{
				\$tag = JFactory::getLanguage()->getTag();
				\$query->where('a.language in (' . \$db->quote(\$tag) . ', ' . \$db->quote('*') . ')');
			}

			// Set the query and load the result.
			\$db->setQuery(\$query, 0, \$limit);
			\$rows = \$db->loadObjectList();

			\$return = array();

			if (\$rows)
			{
				foreach (\$rows as \$key => \$row)
				{
					\$rows[\$key]->href = ${TM_COMPONENT/(.+)/\u\1/g}HelperRoute::get${5:${2/(.+)(s\b)/\u\1/g}}Route(\$row->slug);
				}

				foreach (\$rows as \$key => \$${5/(.+)/\L\1/g})
				{
					if (searchHelper::checkNoHTML(\$${5/(.+)/\L\1/g}, \$searchText, array('text', 'title')))
					{
						\$return[] = \$${5/(.+)/\L\1/g};
					}
				}
			}
		}

		return \$return;
	}
}

]]></content>
	<tabTrigger>jpluginsearch-nocategory</tabTrigger>
	<scope>source.php</scope>
</snippet>
