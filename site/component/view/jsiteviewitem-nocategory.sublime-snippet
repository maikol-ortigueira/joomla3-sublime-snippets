<snippet>
	<content><![CDATA[/**
 * HTML ${1/(.+)/\u\1/g} View class for the ${TM_COMPONENT/(.+)/\u\1/g} component
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}View${1:${TM_SINGULAR/(.+)/\u\1/g}} extends JViewLegacy
{
	/**
	 * A list of user note objects.
	 *
	 * @var    array
	 * @since  $TM_VERSION
	 */
	protected \$item;

	/**
	 * The model state.
	 *
	 * @var    JUser
	 * @since  $TM_VERSION
	 */
	protected \$params;

	/**
	 * The model state.
	 *
	 * @var    JUser
	 * @since  $TM_VERSION
	 */
	protected \$print;

	/**
	 * The model state.
	 *
	 * @var    JObject
	 * @since  $TM_VERSION
	 */
	protected \$state;

	/**
	 * The model state.
	 *
	 * @var    JUser
	 * @since  $TM_VERSION
	 */
	protected \$user;

	/**
	 * Method to display the view.
	 *
	 * @param   string  \$tpl  The template file to include.
	 *
	 * @return  mixed  False on error, null otherwise.
	 *
	 * @since   $TM_VERSION
	 */
	public function display(\$tpl = null)
	{
		// Initialiase variables.
		\$app         = JFactory::getApplication();
		\$user        = JFactory::getUser();
		\$dispatcher  = JEventDispatcher::getInstance();

		// Get some data from the models.
		\$this->item  = \$this->get('Item');
		\$this->print = \$app->input->getBool('print');
		\$this->state = \$this->get('State');
		\$this->user  = \$user;

		// Check for errors.
		if (count(\$errors = \$this->get('Errors')))
		{
			JError::raiseWarning(500, implode("\n", \$errors));

			return false;
		}

		// Create a shortcut for \$item.
		\$item = \$this->item;
		\$item->tagLayout = new JLayoutFile('joomla.content.tags');

		// Add router helpers.
		\$item->slug = \$item->alias ? (\$item->id . ':' . \$item->alias) : \$item->id;

		// TODO: Change based on shownoauth.
		\$item->readmore_link = JRoute::_(${TM_COMPONENT/(.+)/\u\1/g}HelperRoute::get${1/(.+)/\u\1/g}Route(\$item->slug));

		// Merge ${1/(.+)/\L\1/g} params. If this is single-${1/(.+)/\L\1/g} view, menu params override ${1/(.+)/\L\1/g} params.
		// Otherwise, ${1/(.+)/\L\1/g} params override menu item params.
		\$this->params = \$this->state->get('params');
		\$active = \$app->getMenu()->getActive();
		\$temp   = clone \$this->params;

		// Check to see which parameters should take priority.
		if (\$active)
		{
			\$currentLink = \$active->link;

			// If the current view is the active item and an ${1/(.+)/\L\1/g} view for this ${1/(.+)/\L\1/g}, then the menu item params take priority.
			if (strpos(\$currentLink, 'view=${1/(.+)/\L\1/g}') && (strpos(\$currentLink, '&id=' . (string) \$item->id)))
			{
				// Load layout from active query (in case it is an alternative menu item).
				if (isset(\$active->query['layout']))
				{
					\$this->setLayout(\$active->query['layout']);
				}
				// Check for alternative layout of ${1/(.+)/\L\1/g}.
				elseif (\$layout = \$item->params->get('${1/(.+)/\L\1/g}_layout'))
				{
					\$this->setLayout(\$layout);
				}

				// \$item->params are the ${1/(.+)/\L\1/g} params, \$temp are the menu item params.
				// Merge so that the menu item params take priority.
				\$item->params->merge(\$temp);
			}
			else
			{
				// Current view is not a single ${1/(.+)/\L\1/g}, so the ${1/(.+)/\L\1/g} params take priority here.
				// Merge the menu item params with the ${1/(.+)/\L\1/g} params so that the ${1/(.+)/\L\1/g} params take priority.
				\$temp->merge(\$item->params);
				\$item->params = \$temp;

				// Check for alternative layouts (since we are not in a single-${1/(.+)/\L\1/g} menu item).
				// Single-${1/(.+)/\L\1/g} menu item layout takes priority over alt layout for an ${1/(.+)/\L\1/g}.
				if (\$layout = \$item->params->get('${1/(.+)/\L\1/g}_layout'))
				{
					\$this->setLayout(\$layout);
				}
			}
		}
		else
		{
			// Merge so that ${1/(.+)/\L\1/g} params take priority.
			\$temp->merge(\$item->params);
			\$item->params = \$temp;

			// Check for alternative layouts (since we are not in a single-${1/(.+)/\L\1/g} menu item)
			// Single-${1/(.+)/\L\1/g} menu item layout takes priority over alt layout for an ${1/(.+)/\L\1/g}.
			if (\$layout = \$item->params->get('${1/(.+)/\L\1/g}_layout'))
			{
				\$this->setLayout(\$layout);
			}
		}

		\$offset = \$this->state->get('list.offset');

		// Check the view access to the ${1/(.+)/\L\1/g} (the model has already computed the values).
		if (\$item->params->get('access-view') != true && ((\$item->params->get('show_noauth') != true &&  \$user->get('guest') )))
		{
			JError::raiseWarning(403, JText::_('JERROR_ALERTNOAUTHOR'));

			return;
		}

		\$item->text = \$item->description;

		\$item->tags = new JHelperTags;
		\$item->tags->getItemTags('com_${TM_COMPONENT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}', \$this->item->id);

		// Process the content plugins.
		JPluginHelper::importPlugin('content');
		\$dispatcher->trigger('onContentPrepare', array ('com_${TM_COMPONENT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}', &\$item, &\$this->params, \$offset));

		\$item->event = new stdClass;
		\$results = \$dispatcher->trigger('onContentAfterTitle', array('com_${TM_COMPONENT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}', &\$item, &\$this->params, \$offset));
		\$item->event->afterDisplayTitle = trim(implode("\n", \$results));

		\$results = \$dispatcher->trigger('onContentBeforeDisplay', array('com_${TM_COMPONENT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}', &\$item, &\$this->params, \$offset));
		\$item->event->beforeDisplayContent = trim(implode("\n", \$results));

		\$results = \$dispatcher->trigger('onContentAfterDisplay', array('com_${TM_COMPONENT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}', &\$item, &\$this->params, \$offset));
		\$item->event->afterDisplayContent = trim(implode("\n", \$results));

		// Increment the hit counter of the ${1/(.+)/\L\1/g}.
		if (!\$this->params->get('intro_only') && \$offset == 0)
		{
			\$model = \$this->getModel();
			\$model->hit();
		}

		// Escape strings for HTML output.
		\$this->pageclass_sfx = htmlspecialchars(\$this->item->params->get('pageclass_sfx'));

		\$this->_prepareDocument();

		parent::display(\$tpl);
	}

	/**
	 * Prepares the document.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function _prepareDocument()
	{
		// Initialiase variables.
		\$app     = JFactory::getApplication();
		\$menus   = \$app->getMenu();
		\$pathway = \$app->getPathway();
		\$title   = null;

		// Because the application sets a default page title,
		// we need to get it from the menu item itself.
		\$menu = \$menus->getActive();

		if (\$menu)
		{
			\$this->params->def('page_heading', \$this->params->get('page_title', \$menu->title));
		}
		else
		{
			\$this->params->def('page_heading', JText::_('COM_${TM_COMPONENT/(.+)/\U\1/g}_DEFAULT_PAGE_TITLE'));
		}

		\$title = \$this->params->get('page_title', '');

		\$id = (int) @\$menu->query['id'];

		// If the menu item does not concern this ${1/(.+)/\L\1/g}.
		if (\$menu && (\$menu->query['option'] != 'com_${TM_COMPONENT/(.+)/\L\1/g}' || \$menu->query['view'] != '${1/(.+)/\L\1/g}' || \$id != \$this->item->id))
		{
			// If this is not a single ${1/(.+)/\L\1/g} menu item, set the page title to the ${1/(.+)/\L\1/g} ${2/(.+)/\L\1/g}.
			if (\$this->item->${2/(.+)/\L\1/g})
			{
				\$title = \$this->item->${2:title};
			}

			\$path = array(array('title' => \$this->item->${2/(.+)/\L\1/g}, 'link' => ''));

			\$path = array_reverse(\$path);

			foreach (\$path as \$item)
			{
				\$pathway->addItem(\$item['title'], \$item['link']);
			}
		}

		// Check for empty title and add site name if param is set.
		if (empty(\$title))
		{
			\$title = \$app->getCfg('sitename');
		}
		elseif (\$app->getCfg('sitename_pagetitles', 0) == 1)
		{
			\$title = JText::sprintf('JPAGETITLE', \$app->getCfg('sitename'), \$title);
		}
		elseif (\$app->getCfg('sitename_pagetitles', 0) == 2)
		{
			\$title = JText::sprintf('JPAGETITLE', \$title, \$app->getCfg('sitename'));
		}

		if (empty(\$title))
		{
			\$title = \$this->item->${2/(.+)/\L\1/g};
		}

		\$this->document->setTitle(\$title);

		// Configure the document meta-description.
		if (\$this->item->metadesc)
		{
			\$this->document->setDescription(\$this->item->metadesc);
		}
		elseif (!\$this->item->metadesc && \$this->params->get('menu-meta_description'))
		{
			\$this->document->setDescription(\$this->params->get('menu-meta_description'));
		}

		// Configure the document meta-keywords.
		if (\$this->item->metakey)
		{
			\$this->document->setMetadata('keywords', \$this->item->metakey);
		}
		elseif (!\$this->item->metakey && \$this->params->get('menu-meta_keywords'))
		{
			\$this->document->setMetadata('keywords', \$this->params->get('menu-meta_keywords'));
		}

		// Configure the document robots.
		if (\$this->params->get('robots'))
		{
			\$this->document->setMetadata('robots', \$this->params->get('robots'));
		}

		if (\$app->getCfg('MetaAuthor') == '1')
		{
			\$this->document->setMetaData('author', \$this->item->author);
		}

		\$mdata = \$this->item->metadata->toArray();

		foreach (\$mdata as \$k => \$v)
		{
			if (\$v)
			{
				\$this->document->setMetadata(\$k, \$v);
			}
		}

		// If there is a pagebreak heading or title, add it to the page title.
		if (!empty(\$this->item->page_title))
		{
			\$this->item->${2/(.+)/\L\1/g} = \$this->item->${2/(.+)/\L\1/g} . ' - ' . \$this->item->page_title;
			\$this->document->setTitle(\$this->item->page_title . ' - ' . JText::sprintf('PLG_CONTENT_PAGEBREAK_PAGE_NUM', \$this->state->get('list.offset') + 1));
		}

		if (\$this->print)
		{
			\$this->document->setMetaData('robots', 'noindex, nofollow');
		}
	}
}

]]></content>
	<tabTrigger>jsiteviewitem-nocategory</tabTrigger>
	<scope>source.php</scope>
</snippet>
