<snippet>
	<content><![CDATA[/**
 * HTML ${1/(.+)/\u\1/g} View class for the ${TM_COMPONENT/(.+)/\u\1/g} component.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}View${1:${TM_PLURAL/(.+)/\u\1/g}} extends JViewLegacy
{
	/**
	 * Model state object.
	 *
	 * @var     object
	 */
	protected \$state;

	/**
	 * List of update items.
	 *
	 * @var     array
	 */
	protected \$items;

	/**
	 * List pagination.
	 *
	 * @var     JPagination
	 */
	protected \$pagination;

	/**
	 * Method to display the view.
	 *
	 * @param   string  \$tpl  The template file to include.
	 *
	 * @return  mixed  False on error, null otherwise.
	 *
	 * @since   $TM_VERSION
	 */
	public function display(\$tpl = null)
	{
		// Initialiase variables.
		\$app        = JFactory::getApplication();
		\$user       = JFactory::getUser();
		\$params     = \$app->getParams();

		// Get some data from the models.
		\$state      = \$this->get('State');
		\$items      = \$this->get('Items');
		\$pagination = \$this->get('Pagination');

		// Check for errors.
		if (count(\$errors = \$this->get('Errors')))
		{
			JError::raiseError(500, implode("\n", \$errors));

			return false;
		}

		// Prepare the data.
		// Compute the ${2:${1/(.+)(s\b)/\L\1/g}} slug.
		for (\$i = 0, \$n = count(\$items); \$i < \$n; \$i++)
		{
			\$item       = &\$items[\$i];
			\$item->slug = \$item->alias ? (\$item->id . ':' . \$item->alias) : \$item->id;
			\$item->link = ${TM_COMPONENT/(.+)/\u\1/g}HelperRoute::get${1/(.+)/\u\1/g}Route(\$item->slug);

			\$item->params = clone \$params;
		}

		// Escape strings for HTML output.
		\$this->pageclass_sfx = htmlspecialchars(\$params->get('pageclass_sfx'));

		\$maxLevel         = \$params->get('maxLevel', -1);
		\$this->maxLevel   = &\$maxLevel;
		\$this->state      = &\$state;
		\$this->items      = &\$items;
		\$this->params     = &\$params;
		\$this->pagination = &\$pagination;
		\$this->user       = &\$user;

		// Check for layout override only if this is not the active menu item.
		\$active = \$app->getMenu()->getActive();

		if (isset(\$active->query['layout']))
		{
			// We need to set the layout in case this is an alternative menu item (with an alternative layout).
			\$this->setLayout(\$active->query['layout']);
		}

		\$this->_prepareDocument();

		parent::display(\$tpl);
	}

	/**
	 * Prepares the document.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function _prepareDocument()
	{
		// Initialiase variables.
		\$app     = JFactory::getApplication();
		\$menus   = \$app->getMenu();
		\$title   = null;

		// Because the application sets a default page title,
		// we need to get it from the menu item itself.
		\$menu = \$menus->getActive();

		if (\$menu)
		{
			\$this->params->def('page_heading', \$this->params->get('page_title', \$menu->title));
		}
		else
		{
			\$this->params->def('page_heading', JText::_('COM_${TM_COMPONENT/(.+)/\U\1/g}_DEFAULT_PAGE_TITLE'));
		}

		\$title = \$this->params->get('page_title', '');

		if (empty(\$title))
		{
			\$title = \$app->getCfg('sitename');
		}
		elseif (\$app->getCfg('sitename_pagetitles', 0) == 1)
		{
			\$title = JText::sprintf('JPAGETITLE', \$app->getCfg('sitename'), \$title);
		}
		elseif (\$app->getCfg('sitename_pagetitles', 0) == 2)
		{
			\$title = JText::sprintf('JPAGETITLE', \$title, \$app->getCfg('sitename'));
		}

		\$this->document->setTitle(\$title);

		// Configure the document meta-description.
		if (\$this->params->get('menu-meta_description'))
		{
			\$this->document->setDescription(\$this->params->get('menu-meta_description'));
		}

		// Configure the document meta-keywords.
		if (\$this->params->get('menu-meta_keywords'))
		{
			\$this->document->setMetadata('keywords', \$this->params->get('menu-meta_keywords'));
		}

		// Configure the document robots.
		if (\$this->params->get('robots'))
		{
			\$this->document->setMetadata('robots', \$this->params->get('robots'));
		}
	}
}

]]></content>
	<tabTrigger>jsiteviewlist-mini</tabTrigger>
	<scope>source.php</scope>
</snippet>
