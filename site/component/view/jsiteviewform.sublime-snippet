<snippet>
	<content><![CDATA[/**
 * HTML ${1/(.+)/\u\1/g} View class for the ${TM_COMPONENT/(.+)/\u\1/g} component.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}ViewForm extends JViewLegacy
{
	/**
	 * The form to use for the view.
	 *
	 * @var     JForm
	 */
	protected \$form;

	/**
	 * A list of user note objects.
	 *
	 * @var     array
	 */
	protected \$item;

	/**
	 * [\$return_page description]
	 *
	 * @var     [type]
	 */
	protected \$return_page;

	/**
	 * The model state.
	 *
	 * @var     JObject
	 */
	protected \$state;

	/**
	 * Method to display the view.
	 *
	 * @param   string  \$tpl  The template file to include.
	 *
	 * @return  mixed  False on error, null otherwise.
	 *
	 * @since   $TM_VERSION
	 */
	public function display(\$tpl = null)
	{
		// Get the current user object.
		\$user = JFactory::getUser();

		// Get model data.
		\$this->state       = \$this->get('State');
		\$this->item        = \$this->get('Item');
		\$this->form        = \$this->get('Form');
		\$this->return_page = \$this->get('ReturnPage');

		if (empty(\$this->item->id))
		{
			\$authorised = \$user->authorise('core.create', 'com_${TM_COMPONENT/(.+)/\L\1/g}') || (count(\$user->getAuthorisedCategories('com_${TM_COMPONENT/(.+)/\L\1/g}', 'core.create')));
		}
		else
		{
			\$authorised = \$this->item->params->get('access-edit');
		}

		if (\$authorised !== true)
		{
			JError::raiseError(403, JText::_('JERROR_ALERTNOAUTHOR'));

			return false;
		}

		\$this->item->tags = new JHelperTags;

		if (!empty(\$this->item->id))
		{
			\$this->item->tags->getItemTags('com_${TM_COMPONENT/(.+)/\L\1/g}.${1:${TM_SINGULAR/(.+)/\L\1/g}}.', \$this->item->id);
		}

		if (!empty(\$this->item) && isset(\$this->item->id))
		{
			\$this->item->images = json_decode(\$this->item->images);

			\$tmp = new stdClass;
			\$tmp->images = \$this->item->images;
			\$this->form->bind(\$tmp);
		}

		// Check for errors.
		if (count(\$errors = \$this->get('Errors')))
		{
			JError::raiseWarning(500, implode("\n", \$errors));

			return false;
		}

		// Create a shortcut to the parameters.
		\$params = &\$this->state->params;

		// Escape strings for HTML output.
		\$this->pageclass_sfx = htmlspecialchars(\$params->get('pageclass_sfx'));

		\$this->params = \$params;
		\$this->user   = \$user;

		if (\$params->get('enable_category') == 1)
		{
			\$this->form->setFieldAttribute('catid', 'default', \$params->get('catid', 1));
			\$this->form->setFieldAttribute('catid', 'readonly', 'true');
		}

		\$this->_prepareDocument();

		parent::display(\$tpl);
	}

	/**
	 * Prepares the document.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function _prepareDocument()
	{
		// Initialiase variables.
		\$app   = JFactory::getApplication();
		\$menus = \$app->getMenu();
		\$title = null;

		// Because the application sets a default page title,
		// we need to get it from the menu item itself'.
		\$menu = \$menus->getActive();

		if (\$menu)
		{
			\$this->params->def('page_heading', \$this->params->get('page_title', \$menu->title));
		}
		else
		{
			\$this->params->def('page_heading', JText::_('COM_${TM_COMPONENT/(.+)/\U\1/g}_FORM_EDIT_${1/(.+)/\U\1/g}'));
		}

		\$title = \$this->params->def('page_title', JText::_('COM_${TM_COMPONENT/(.+)/\U\1/g}_FORM_EDIT_${1/(.+)/\U\1/g}'));

		if (\$app->getCfg('sitename_pagetitles', 0) == 1)
		{
			\$title = JText::sprintf('JPAGETITLE', \$app->getCfg('sitename'), \$title);
		}
		elseif (\$app->getCfg('sitename_pagetitles', 0) == 2)
		{
			\$title = JText::sprintf('JPAGETITLE', \$title, \$app->getCfg('sitename'));
		}

		\$this->document->setTitle(\$title);

		\$pathway = \$app->getPathWay();
		\$pathway->addItem(\$title, '');

		// Configure the document meta-description.
		if (\$this->params->get('menu-meta_description'))
		{
			\$this->document->setDescription(\$this->params->get('menu-meta_description'));
		}

		// Configure the document meta-keywords.
		if (\$this->params->get('menu-meta_keywords'))
		{
			\$this->document->setMetadata('keywords', \$this->params->get('menu-meta_keywords'));
		}

		// Configure the document robots.
		if (\$this->params->get('robots'))
		{
			\$this->document->setMetadata('robots', \$this->params->get('robots'));
		}
	}
}

]]></content>
	<tabTrigger>jsiteviewform</tabTrigger>
	<scope>source.php</scope>
</snippet>
