<snippet>
	<content><![CDATA[/**
 * ${1/(.+)/\u\1/g} controller for ${TM_COMPONENT/(.+)/\u\1/g} Component.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}Controller${1:${TM_FILENAME/(.*?)(\..+)/\u$1/}} extends JControllerForm
{
	/**
	 * The URL view item variable.
	 *
	 * @var     string
	 * @since   $TM_VERSION
	 */
	protected \$view_item = '${2:form}';

	/**
	 * The URL view list variable.
	 *
	 * @var     string
	 * @since   $TM_VERSION
	 */
	protected \$view_list = '${3:${TM_PLURAL/(.+)/\L\1/g}}';

	/**
	 * The URL edit variable.
	 *
	 * @var     string
	 * @since   $TM_VERSION
	 */
	protected \$urlVar = 'a.id';

	/**
	 * Method to add a new record.
	 *
	 * @return  mixed  True if the record can be added, a error object if not.
	 *
	 * @since   $TM_VERSION
	 */
	public function add()
	{
		if (!parent::add())
		{
			// Redirect to the return page.
			\$this->setRedirect(\$this->getReturnPage());
		}
	}

	/**
	 * Method override to check if you can add a new record.
	 *
	 * @param   array  \$data  An array of input data.
	 *
	 * @return  boolean
	 *
	 * @since   $TM_VERSION
	 */
	protected function allowAdd(\$data = array())
	{
		// Get the current user object.
		\$user = JFactory::getUser();

		return (\$user->authorise('core.create', 'com_${TM_COMPONENT/(.+)/\L\1/g}'));
	}

	/**
	 * Method override to check if you can edit an existing record.
	 *
	 * @param   array   \$data  An array of input data.
	 * @param   string  \$key   The name of the key for the primary key; default is id.
	 *
	 * @return  boolean
	 *
	 * @since   $TM_VERSION
	 */
	protected function allowEdit(\$data = array(), \$key = 'id')
	{
		// Initialiase variables.
		\$recordId = (int) isset(\$data[\$key]) ? \$data[\$key] : 0;
		\$user     = JFactory::getUser();
		\$userId   = \$user->get('id');
		\$asset    = 'com_${TM_COMPONENT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}.' . \$recordId;

		// Check general edit permission first.
		if (\$user->authorise('core.edit', \$asset))
		{
			return true;
		}

		// Fallback on edit.own.
		// First test if the permission is available.
		if (\$user->authorise('core.edit.own', \$asset))
		{
			// Now test the owner is the user.
			\$ownerId = (int) isset(\$data['created_by']) ? \$data['created_by'] : 0;

			if (empty(\$ownerId) && \$recordId)
			{
				// Need to do a lookup from the model.
				\$record = \$this->getModel()->getItem(\$recordId);

				if (empty(\$record))
				{
					return false;
				}

				\$ownerId = \$record->created_by;
			}

			// If the owner matches 'me' then do the test.
			if (\$ownerId == \$userId)
			{
				return true;
			}
		}

		// Since there is no asset tracking, revert to the component permissions.
		return parent::allowEdit(\$data, \$key);
	}

	/**
	 * Method to cancel an edit.
	 *
	 * @param   string  \$key  The name of the primary key of the URL variable.
	 *
	 * @return  boolean  True if access level checks pass, false otherwise.
	 *
	 * @since   $TM_VERSION
	 */
	public function cancel(\$key = '${TM_COMPONENT/(.)(.+)/\L\1/g}_id')
	{
		parent::cancel(\$key);

		// Redirect to the return page.
		\$this->setRedirect(\$this->getReturnPage());
	}

	/**
	 * Method to edit an existing record.
	 *
	 * @param   string  \$key     The name of the primary key of the URL variable.
	 * @param   string  \$urlVar  The name of the URL variable if different from the primary key
	 *                            (sometimes required to avoid router collisions).
	 *
	 * @return  boolean  True if access level check and checkout passes, false otherwise.
	 *
	 * @since   $TM_VERSION
	 */
	public function edit(\$key = null, \$urlVar = '${TM_COMPONENT/(.)(.+)/\L\1/g}_id')
	{
		return parent::edit(\$key, \$urlVar);
	}

	/**
	 * Method to get a model object, loading it if required.
	 *
	 * @param   string  \$name    The model name. Optional.
	 * @param   string  \$prefix  The class prefix. Optional.
	 * @param   array   \$config  Configuration array for model. Optional.
	 *
	 * @return  object  The model.
	 *
	 * @since   $TM_VERSION
	 */
	public function getModel(\$name = '${2/(.+)/\u\1/g}', \$prefix = '${TM_COMPONENT/(.+)/\u\1/g}Model', \$config = array('ignore_request' => true))
	{
		return parent::getModel(\$name, \$prefix, \$config);
	}

	/**
	 * Gets the URL arguments to append to an item redirect.
	 *
	 * @param   integer  \$recordId  The primary key id for the item.
	 * @param   string   \$urlVar    The name of the URL variable for the id.
	 *
	 * @return  string  The arguments to append to the redirect URL.
	 *
	 * @since   $TM_VERSION
	 */
	protected function getRedirectToItemAppend(\$recordId = null, \$urlVar = '${TM_COMPONENT/(.)(.+)/\L\1/g}_id')
	{
		// Need to override the parent method completely.
		\$tmpl   = \$this->input->get('tmpl');
		\$append = '';

		// Setup redirect info.
		if (\$tmpl)
		{
			\$append .= '&tmpl=' . \$tmpl;
		}

		\$append .= '&layout=edit';

		if (\$recordId)
		{
			\$append .= '&' . \$urlVar . '=' . \$recordId;
		}

		\$itemId = \$this->input->getInt('Itemid');
		\$return = \$this->getReturnPage();

		if (\$itemId)
		{
			\$append .= '&Itemid=' . \$itemId;
		}

		if (\$return)
		{
			\$append .= '&return=' . base64_encode(\$return);
		}

		return \$append;
	}

	/**
	 * Get the return URL.
	 *
	 * If a "return" variable has been passed in the request.
	 *
	 * @return  string  The return URL.
	 *
	 * @since   $TM_VERSION
	 */
	protected function getReturnPage()
	{
		\$return = \$this->input->get('return', null, 'base64');

		if (empty(\$return) || !JUri::isInternal(base64_decode(\$return)))
		{
			return JUri::base();
		}
		else
		{
			return base64_decode(\$return);
		}
	}

	/**
	 * Function that allows child controller access to model data after the data has been saved.
	 *
	 * @param   JModelLegacy  \$model      The data model object.
	 * @param   array         \$validData  The validated data.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function postSaveHook(JModelLegacy \$model, \$validData = array())
	{
		return;
	}

	/**
	 * Method to save a record.
	 *
	 * @param   string  \$key     The name of the primary key of the URL variable.
	 * @param   string  \$urlVar  The name of the URL variable if different from the primary key (sometimes required to avoid router collisions).
	 *
	 * @return  boolean  True if successful, false otherwise.
	 *
	 * @since   $TM_VERSION
	 */
	public function save(\$key = null, \$urlVar = '${TM_COMPONENT/(.)(.+)/\L\1/g}_id')
	{
		\$result = parent::save(\$key, \$urlVar);

		// If ok, redirect to the return page.
		if (\$result)
		{
			\$this->setRedirect(\$this->getReturnPage());
		}

		return \$result;
	}
}

]]></content>
	<tabTrigger>jsitecontrollerform-simple</tabTrigger>
	<scope>source.php</scope>
</snippet>
