<snippet>
	<content><![CDATA[// Load dependent classes.
require_once __DIR__ . '/${2:${TM_PLURAL/(.+)/\L\1/g}}.php';

/**
 * ${TM_COMPONENT/(.+)/\u\1/g} Component ${1/(.+)/\u\1/g} Model.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}Model${1:Archive} extends ${TM_COMPONENT/(.+)/\u\1/g}Model${2/(.+)/\u\1/g}
{
	/**
	 * Model context string.
	 *
	 * @var     string
	 */
	public \$_context = 'com_${TM_COMPONENT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}';

	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @param   string  \$ordering   An optional ordering field.
	 * @param   string  \$direction  An optional direction (asc|desc).
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function populateState(\$ordering = null, \$direction = null)
	{
		parent::populateState();

		// Get the application.
		\$app    = JFactory::getApplication();

		// Add ${1/(.+)/\L\1/g} properties.
		\$params = \$this->state->params;

		// Filter on archived ${2/(.+)/\L\1/g}.
		\$this->setState('filter.state', 2);

		// Filter on month, year.
		\$this->setState('filter.month', \$app->input->getInt('month'));
		\$this->setState('filter.year', \$app->input->getInt('year'));

		// Optional filter text.
		\$this->setState('list.filter', \$app->input->getString('filter-search'));

		// Get list limit.
		\$itemid = \$app->input->get('Itemid', 0, 'int');
		\$limit  = \$app->getUserStateFromRequest('com_${TM_COMPONENT/(.+)/\L\1/g}.${1/(.+)/\L\1/g}.list' . \$itemid . '.limit', 'limit', \$params->get('display_num'), 'uint');
		\$this->setState('list.limit', \$limit);
	}

	/**
	 * Method to build an SQL query to load the list data.
	 *
	 * @return  string  An SQL query.
	 *
	 * @since   $TM_VERSION
	 */
	protected function getListQuery()
	{
		// Set the ${1/(.+)/\L\1/g} ordering.
		\$params = \$this->state->params;
		\$${3:${2/(.+)(s\b)/\L\1/g}}Orderby   = \$params->get('orderby_sec', 'rdate');
		\$${3/(.+)/\L\1/g}OrderDate = \$params->get('order_date');

		// No category ordering.
		\$categoryOrderby = '';
		\$secondary       = ${TM_COMPONENT/(.+)/\u\1/g}HelperQuery::orderbySecondary(\$${3/(.+)/\L\1/g}Orderby, \$${3/(.+)/\L\1/g}OrderDate) . ', ';
		\$primary         = ${TM_COMPONENT/(.+)/\u\1/g}HelperQuery::orderbyPrimary(\$categoryOrderby);

		\$orderby = \$primary . ' ' . \$secondary . ' a.created DESC';
		\$this->setState('list.ordering', \$orderby);
		\$this->setState('list.direction', '');

		// Create a new query object.
		\$query = parent::getListQuery();

		// Add routing for ${1/(.+)/\L\1/g}
		// sqlsrv changes.
		\$case_when = ' CASE WHEN ';
		\$case_when .= \$query->charLength('a.alias', '!=', '0');
		\$case_when .= ' THEN ';
		\$${TM_COMPONENT/(.)(.+)/\L\1/g}_id      = \$query->castAsChar('a.id');
		\$case_when .= \$query->concatenate(array(\$${TM_COMPONENT/(.)(.+)/\L\1/g}_id, 'a.alias'), ':');
		\$case_when .= ' ELSE ';
		\$case_when .= \$${TM_COMPONENT/(.)(.+)/\L\1/g}_id . ' END as slug';

		\$query->select(\$case_when);

		\$case_when = ' CASE WHEN ';
		\$case_when .= \$query->charLength('c.alias', '!=', '0');
		\$case_when .= ' THEN ';
		\$c_id      = \$query->castAsChar('c.id');
		\$case_when .= \$query->concatenate(array(\$c_id, 'c.alias'), ':');
		\$case_when .= ' ELSE ';
		\$case_when .= \$c_id . ' END as catslug';

		\$query->select(\$case_when);

		// Filter on month, year.
		// First, get the date field.
		\$queryDate = ${TM_COMPONENT/(.+)/\u\1/g}HelperQuery::getQueryDate(\$${3/(.+)/\L\1/g}OrderDate);

		if (\$month = \$this->getState('filter.month'))
		{
			\$query->where('MONTH(' . \$queryDate . ') = ' . \$month);
		}

		if (\$year = \$this->getState('filter.year'))
		{
			\$query->where('YEAR(' . \$queryDate . ') = ' . \$year);
		}

		return \$query;
	}

	/**
	 * Method to get the archived ${3/(.+)/\L\1/g} list.
	 *
	 * @access  public
	 * @return  array
	 *
	 * @since   $TM_VERSION
	 */
	public function getData()
	{
		// Get the application.
		\$app = JFactory::getApplication();

		// Lets load the content if it does not already exist.
		if (empty(\$this->_data))
		{
			// Get the page/component configuration.
			\$params = \$app->getParams();

			// Get the pagination request variables.
			\$limit       = \$app->input->get('limit', \$params->get('display_num', 20), 'uint');
			\$limitstart  = \$app->input->get('limitstart', 0, 'uint');
			\$query       = \$this->_buildQuery();
			\$this->_data = \$this->_getList(\$query, \$limitstart, \$limit);
		}

		return \$this->_data;
	}

	/**
	 * JModelLegacy override to add alternating value for \$odd.
	 *
	 * @param   string   \$query       The query.
	 * @param   integer  \$limitstart  Offset.
	 * @param   integer  \$limit       The number of records.
	 *
	 * @return  array
	 *
	 * @since   $TM_VERSION
	 */
	protected function _getList(\$query, \$limitstart = 0, \$limit = 0)
	{
		// Initialiase variables.
		\$result = parent::_getList(\$query, \$limitstart, \$limit);
		\$odd    = 1;

		foreach (\$result as \$k => \$row)
		{
			\$result[\$k]->odd = \$odd;
			\$odd             = 1 - \$odd;
		}

		return \$result;
	}
}

]]></content>
	<tabTrigger>jsitemodelarchive</tabTrigger>
	<scope>source.php</scope>
</snippet>
