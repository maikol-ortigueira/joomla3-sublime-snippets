<snippet>
	<content><![CDATA[// Load dependent classes.
require_once __DIR__ . '/${1:${TM_PLURAL/(.+)/\L\1/g}}.php';

/**
 * Frontpage Component Model.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}ModelFeatured extends ${TM_COMPONENT/(.+)/\u\1/g}Model${1/(.+)/\u\1/g}
{
	/**
	 * Model context string.
	 *
	 * @var     string
	 */
	public \$_context = 'com_${TM_COMPONENT/(.+)/\L\1/g}.frontpage';

	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @param   string  \$ordering   An optional ordering field.
	 * @param   string  \$direction  An optional direction (asc|desc).
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function populateState(\$ordering = null, \$direction = null)
	{
		parent::populateState(\$ordering, \$direction);

		// Initialise variables.
		\$input = JFactory::getApplication()->input;
		\$user  = JFactory::getUser();

		// List state information.
		\$limitstart = \$input->getUInt('limitstart', 0);
		\$this->setState('list.start', \$limitstart);

		\$params = \$this->state->params;
		\$limit = \$params->get('num_leading_${1/(.+)/\L\1/g}') + \$params->get('num_intro_${1/(.+)/\L\1/g}') + \$params->get('num_links');
		\$this->setState('list.limit', \$limit);
		\$this->setState('list.links', \$params->get('num_links'));

		\$this->setState('filter.frontpage', true);

		if ((!\$user->authorise('core.edit.state', 'com_${TM_COMPONENT/(.+)/\L\1/g}')) && (!\$user->authorise('core.edit', 'com_${TM_COMPONENT/(.+)/\L\1/g}')))
		{
			// Filter on published for those who do not have edit or edit.state rights.
			\$this->setState('filter.state', 1);
		}
		else
		{
			\$this->setState('filter.state', array(0, 1, 2));
		}

		// Check for category selection.
		if (\$params->get('featured_categories') && implode(',', \$params->get('featured_categories')) == true)
		{
			\$featuredCategories = \$params->get('featured_categories');
			\$this->setState('filter.frontpage.categories', \$featuredCategories);
		}
	}

	/**
	 * Method to get a list of items.
	 *
	 * @return  mixed  An array of objects on success, false on failure.
	 *
	 * @since   $TM_VERSION
	 */
	public function getItems()
	{
		// Initialiase variables.
		\$params = clone \$this->getState('params');
		\$limit  = \$params->get('num_leading_${1/(.+)/\L\1/g}') + \$params->get('num_intro_${1/(.+)/\L\1/g}') + \$params->get('num_links');

		if (\$limit > 0)
		{
			\$this->setState('list.limit', \$limit);

			return parent::getItems();
		}

		return array();
	}

	/**
	 * Method to get a store id based on model configuration state.
	 *
	 * This is necessary because the model is used by the component and
	 * different modules that might need different sets of data or different
	 * ordering requirements.
	 *
	 * @param   string  \$id  A prefix for the store id.
	 *
	 * @return  string  A store id.
	 */
	protected function getStoreId(\$id = '')
	{
		// Compile the store id.
		\$id .= \$this->getState('filter.frontpage');

		return parent::getStoreId(\$id);
	}

	/**
	 * Method to build an SQL query to load the list data.
	 *
	 * @return  string  An SQL query.
	 *
	 * @since   $TM_VERSION
	 */
	protected function getListQuery()
	{
		// Set the blog ordering.
		\$params           = \$this->state->params;
		\$${2:${1/(.+)(s\b)/\L\1/g}}Orderby   = \$params->get('orderby_sec', 'rdate');
		\$${2/(.+)/\L\1/g}OrderDate = \$params->get('order_date');
		\$categoryOrderby  = \$params->def('orderby_pri', '');
		\$secondary        = ${TM_COMPONENT/(.+)/\u\1/g}HelperQuery::orderbySecondary(\$${2/(.+)/\L\1/g}Orderby, \$${2/(.+)/\L\1/g}OrderDate) . ', ';
		\$primary          = ${TM_COMPONENT/(.+)/\u\1/g}HelperQuery::orderbyPrimary(\$categoryOrderby);

		\$orderby = \$primary . ' ' . \$secondary . ' a.created DESC ';
		\$this->setState('list.ordering', \$orderby);
		\$this->setState('list.direction', '');

		// Create a new query object.
		\$query = parent::getListQuery();

		// Filter by frontpage.
		if (\$this->getState('filter.frontpage'))
		{
			\$query->join('INNER', '#__${TM_COMPONENT/(.+)/\L\1/g}${3:_${TM_PLURAL/(.+)/\L\1/g}}_frontpage AS fp ON fp.${2/(.+)/\L\1/g}_id = a.id');
		}

		// Filter by categories.
		\$featuredCategories = \$this->getState('filter.frontpage.categories');

		if (is_array(\$featuredCategories) && !in_array('', \$featuredCategories))
		{
			\$query->where('a.catid IN (' . implode(',', \$featuredCategories) . ')');
		}

		return \$query;
	}
}

]]></content>
	<tabTrigger>jsitemodelfeatured</tabTrigger>
	<scope>source.php</scope>
</snippet>
