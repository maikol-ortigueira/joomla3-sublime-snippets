<snippet>
	<content><![CDATA[/**
 * This models supports retrieving lists of ${1/(.+)/\L\1/g}.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}Model${1:${TM_FILENAME/(.*?)(\..+)/\u$1/}} extends JModelList
{
	/**
	 * Constructor.
	 *
	 * @param   array  \$config  An optional associative array of configuration settings.
	 *
	 * @see     JController
	 * @since   $TM_VERSION
	 */
	public function __construct(\$config = array())
	{
		if (empty(\$config['filter_fields']))
		{
			\$config['filter_fields'] = array(
				'id', 'a.id',
				'${2:title}', 'a.${2/(.+)/\L\1/g}',
				'alias', 'a.alias',
				'checked_out', 'a.checked_out',
				'checked_out_time', 'a.checked_out_time',
				'published', 'a.published',
				'access', 'a.access', 'access_level',
				'created', 'a.created',
				'created_by', 'a.created_by',
				'ordering', 'a.ordering',
				'language', 'a.language',
				'hits', 'a.hits',
				'publish_up', 'a.publish_up',
				'publish_down', 'a.publish_down',
			);
		}

		parent::__construct(\$config);
	}

	/**
	 * Method to auto-populate the model state.
	 *
	 * This method should only be called once per instantiation and is designed
	 * to be called on the first call to the getState() method unless the model
	 * configuration flag to ignore the request is set.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @param   string  \$ordering   An optional ordering field.
	 * @param   string  \$direction  An optional direction (asc|desc).
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function populateState(\$ordering = 'ordering', \$direction = 'ASC')
	{
		// Get the application.
		\$app = JFactory::getApplication();

		// List state information.
		\$limit = \$app->getUserStateFromRequest('global.list.limit', 'limit', \$app->getCfg('list_limit'), 'uint');
		\$this->setState('list.limit', \$limit);

		\$value = \$app->input->get('limitstart', 0, 'uint');
		\$this->setState('list.start', \$value);

		\$orderCol = \$app->input->get('filter_order', 'a.ordering');

		if (!in_array(\$orderCol, \$this->filter_fields))
		{
			\$orderCol = 'a.ordering';
		}

		\$this->setState('list.ordering', \$orderCol);

		\$listOrder = \$app->input->get('filter_order_Dir', 'ASC');

		if (!in_array(strtoupper(\$listOrder), array('ASC', 'DESC', '')))
		{
			\$listOrder = 'ASC';
		}

		\$this->setState('list.direction', \$listOrder);

		\$params = \$app->getParams();
		\$this->setState('params', \$params);

		// Get the current user object.
		\$user = JFactory::getUser();

		if ((!\$user->authorise('core.edit.state', 'com_${TM_COMPONENT/(.+)/\L\1/g}')) && (!\$user->authorise('core.edit', 'com_${TM_COMPONENT/(.+)/\L\1/g}')))
		{
			// Filter on published for those who do not have edit or edit.state rights.
			\$this->setState('filter.state', 1);
		}

		\$this->setState('filter.language', JLanguageMultilang::isEnabled());

		// Process show_noauth parameter.
		if (!\$params->get('show_noauth'))
		{
			\$this->setState('filter.access', true);
		}
		else
		{
			\$this->setState('filter.access', false);
		}

		\$this->setState('layout', \$app->input->getString('layout'));
	}

	/**
	 * Method to get a store id based on model configuration state.
	 *
	 * This is necessary because the model is used by the component and
	 * different modules that might need different sets of data or different
	 * ordering requirements.
	 *
	 * @param   string  \$id  A prefix for the store id.
	 *
	 * @return  string  A store id.
	 *
	 * @since   $TM_VERSION
	 */
	protected function getStoreId(\$id = '')
	{
		// Compile the store id.
		\$id .= ':' . serialize(\$this->getState('filter.state'));
		\$id .= ':' . \$this->getState('filter.access');
		\$id .= ':' . \$this->getState('filter.${4/(.+)/\L\1/g}_id');
		\$id .= ':' . \$this->getState('filter.${4/(.+)/\L\1/g}_id.include');
		\$id .= ':' . serialize(\$this->getState('filter.author_id'));
		\$id .= ':' . \$this->getState('filter.author_id.include');
		\$id .= ':' . serialize(\$this->getState('filter.author_alias'));
		\$id .= ':' . \$this->getState('filter.author_alias.include');
		\$id .= ':' . \$this->getState('filter.date_filtering');
		\$id .= ':' . \$this->getState('filter.date_field');
		\$id .= ':' . \$this->getState('filter.start_date_range');
		\$id .= ':' . \$this->getState('filter.end_date_range');
		\$id .= ':' . \$this->getState('filter.relative_date');

		return parent::getStoreId(\$id);
	}

	/**
	 * Get the master query for retrieving a list of ${1/(.+)/\L\1/g} subject to the model state.
	 *
	 * @return  JDatabaseQuery
	 *
	 * @since   $TM_VERSION
	 */
	protected function getListQuery()
	{
		// Create a new query object.
		\$db    = \$this->getDbo();
		\$query = \$db->getQuery(true);

		// Select the required fields from the table.
		\$query->select(
			\$this->getState(
				'list.select',
				'a.id, a.${2/(.+)/\L\1/g}, a.alias, a.description'
				. ', a.checked_out, a.checked_out_time'
				. ', a.created, a.created_by, a.created_by_alias'
				// Use created if modified is 0.
				. ', CASE WHEN a.modified = ' . \$db->quote(\$db->getNullDate()) . ' THEN a.created ELSE a.modified END as modified'
				. ', a.modified_by, uam.name as modified_by_name'
				// Use created if publish_up is 0.
				. ', CASE WHEN a.publish_up = ' . \$db->quote(\$db->getNullDate()) . ' THEN a.created ELSE a.publish_up END as publish_up'
				. ', a.publish_down, a.params, a.metadata, a.metakey, a.metadesc, a.access'
				. ', a.hits, a.xreference'
			)
		);

		\$query->from('#__${TM_COMPONENT/(.+)/\L\1/g}${3:_${1/(.+)/\L\1/g}} AS a');

		// Join over the users for the author and modified_by names.
		\$query->select("CASE WHEN a.created_by_alias > ' ' THEN a.created_by_alias ELSE ua.name END AS author")
			->select("ua.email AS author_email")
			->join('LEFT', '#__users AS ua ON ua.id = a.created_by')
			->join('LEFT', '#__users AS uam ON uam.id = a.modified_by');

		// Get contact id.
		\$subQuery = \$db->getQuery(true)
			->select('MAX(contact.id) AS id')
			->from('#__contact_details AS contact')
			->where('contact.published = 1')
			->where('contact.user_id = a.created_by');

			// Filter by language.
			if (\$this->getState('filter.language'))
			{
				\$subQuery->where('(contact.language in (' . \$db->quote(JFactory::getLanguage()->getTag()) . ',' . \$db->quote('*') . ') OR contact.language IS NULL)');
			}

		\$query->select('(' . \$subQuery . ') as contactid');

		// Filter by access level.
		if (\$access = \$this->getState('filter.access'))
		{
			\$user = JFactory::getUser();
			\$groups = implode(',', \$user->getAuthorisedViewLevels());
			\$query->where('a.access IN (' . \$groups . ')');
		}

		// Filter by published state.
		\$published = \$this->getState('filter.state');

		if (is_numeric(\$published))
		{
			\$query->where('a.published = ' . (int) \$published);
		}
		elseif (is_array(\$published))
		{
			JArrayHelper::toInteger(\$published);

			\$published = implode(',', \$published);

			\$query->where('a.published IN (' . \$published . ')');
		}

		// Filter by a single or group of ${1/(.+)/\L\1/g}.
		\$${4/(.+)/\L\1/g}Id = \$this->getState('filter.${4/(.+)/\L\1/g}_id');

		if (is_numeric(\$${4/(.+)/\L\1/g}Id))
		{
			\$type = \$this->getState('filter.${4/(.+)/\L\1/g}_id.include', true) ? '= ' : '<> ';
			\$query->where('a.id ' . \$type . (int) \$${4/(.+)/\L\1/g}Id);
		}
		elseif (is_array(\$${4/(.+)/\L\1/g}Id))
		{
			JArrayHelper::toInteger(\$${4/(.+)/\L\1/g}Id);

			\$${4/(.+)/\L\1/g}Id = implode(',', \$${4/(.+)/\L\1/g}Id);
			\$type = \$this->getState('filter.${4/(.+)/\L\1/g}_id.include', true) ? 'IN' : 'NOT IN';
			\$query->where('a.id ' . \$type . ' (' . \$${4/(.+)/\L\1/g}Id . ')');
		}

		// Filter by author.
		\$authorId = \$this->getState('filter.author_id');
		\$authorWhere = '';

		if (is_numeric(\$authorId))
		{
			\$type = \$this->getState('filter.author_id.include', true) ? '= ' : '<> ';
			\$authorWhere = 'a.created_by ' . \$type . (int) \$authorId;
		}
		elseif (is_array(\$authorId))
		{
			JArrayHelper::toInteger(\$authorId);

			\$authorId = implode(',', \$authorId);

			if (\$authorId)
			{
				\$type = \$this->getState('filter.author_id.include', true) ? 'IN' : 'NOT IN';
				\$authorWhere = 'a.created_by ' . \$type . ' (' . \$authorId . ')';
			}
		}

		// Filter by author alias.
		\$authorAlias = \$this->getState('filter.author_alias');
		\$authorAliasWhere = '';

		if (is_string(\$authorAlias))
		{
			\$type = \$this->getState('filter.author_alias.include', true) ? '= ' : '<> ';
			\$authorAliasWhere = 'a.created_by_alias ' . \$type . \$db->quote(\$authorAlias);
		}
		elseif (is_array(\$authorAlias))
		{
			\$first = current(\$authorAlias);

			if (!empty(\$first))
			{
				JArrayHelper::toString(\$authorAlias);

				foreach (\$authorAlias as \$key => \$alias)
				{
					\$authorAlias[\$key] = \$db->quote(\$alias);
				}

				\$authorAlias = implode(',', \$authorAlias);

				if (\$authorAlias)
				{
					\$type = \$this->getState('filter.author_alias.include', true) ? 'IN' : 'NOT IN';
					\$authorAliasWhere = 'a.created_by_alias ' . \$type . ' (' . \$authorAlias . ')';
				}
			}
		}

		if (!empty(\$authorWhere) && !empty(\$authorAliasWhere))
		{
			\$query->where('(' . \$authorWhere . ' OR ' . \$authorAliasWhere . ')');
		}
		elseif (empty(\$authorWhere) && empty(\$authorAliasWhere))
		{
			// If both are empty we don't want to add to the query.
		}
		else
		{
			// One of these is empty, the other is not so we just add both.
			\$query->where(\$authorWhere . \$authorAliasWhere);
		}

		// Filter by start and end dates.
		\$nullDate = \$db->quote(\$db->getNullDate());
		\$nowDate  = \$db->quote(JFactory::getDate()->toSql());

		\$query->where('(a.publish_up = ' . \$nullDate . ' OR a.publish_up <= ' . \$nowDate . ')')
			->where('(a.publish_down = ' . \$nullDate . ' OR a.publish_down >= ' . \$nowDate . ')');

		// Filter by Date Range or Relative Date.
		\$dateFiltering = \$this->getState('filter.date_filtering', 'off');
		\$dateField     = \$this->getState('filter.date_field', 'a.created');

		switch (\$dateFiltering)
		{
			case 'range':
				\$startDateRange = \$db->quote(\$this->getState('filter.start_date_range', \$nullDate));
				\$endDateRange = \$db->quote(\$this->getState('filter.end_date_range', \$nullDate));
				\$query->where('(' . \$dateField . ' >= ' . \$startDateRange . ' AND ' . \$dateField . ' <= ' . \$endDateRange . ')');
				break;

			case 'relative':
				\$relativeDate = (int) \$this->getState('filter.relative_date', 0);
				\$query->where(\$dateField . ' >= DATE_SUB(' . \$nowDate . ', INTERVAL ' . \$relativeDate . ' DAY)');
				break;

			case 'off':
			default:
				break;
		}

		// Process the filter for list views with user-entered filters.
		\$params = \$this->getState('params');

		if ((is_object(\$params)) && (\$params->get('filter_field') != 'hide') && (\$filter = \$this->getState('list.filter')))
		{
			// Clean filter variable.
			\$filter     = JString::strtolower(\$filter);
			\$hitsFilter = (int) \$filter;
			\$filter     = \$db->quote('%' . \$db->escape(\$filter, true) . '%', false);

			switch (\$params->get('filter_field'))
			{
				case 'author':
					\$query->where(
						'LOWER( CASE WHEN a.created_by_alias > ' . \$db->quote(' ')
						. ' THEN a.created_by_alias ELSE ua.name END ) LIKE ' . \$filter . ' '
					);
					break;

				case 'hits':
					\$query->where('a.hits >= ' . \$hitsFilter . ' ');
					break;

				case '${2/(.+)/\L\1/g}':
				default:
					// Default to '${2/(.+)/\L\1/g}' if parameter is not valid.
					\$query->where('LOWER( a.${2/(.+)/\L\1/g} ) LIKE ' . \$filter);
					break;
			}
		}

		// Filter by language.
		if (\$this->getState('filter.language'))
		{
			\$query->where('a.language in (' . \$db->quote(JFactory::getLanguage()->getTag()) . ',' . \$db->quote('*') . ')');
		}

		// Add the list ordering clause.
		\$query->order(\$this->getState('list.ordering', 'a.ordering') . ' ' . \$this->getState('list.direction', 'ASC'));

		return \$query;
	}

	/**
	 * Method to get a list of ${1/(.+)/\L\1/g}.
	 *
	 * Overriden to inject convert the params field into a JParameter object.
	 *
	 * @return  mixed  An array of objects on success, false on failure.
	 *
	 * @since   $TM_VERSION
	 */
	public function getItems()
	{
		// Initialiase variables.
		\$items  = parent::getItems();
		\$user   = JFactory::getUser();
		\$userId = \$user->get('id');
		\$guest  = \$user->get('guest');
		\$groups = \$user->getAuthorisedViewLevels();
		\$input  = JFactory::getApplication()->input;

		// Get the global params.
		\$globalParams = JComponentHelper::getParams('com_${TM_COMPONENT/(.+)/\L\1/g}', true);

		// Convert the parameter fields into objects.
		foreach (\$items as &\$item)
		{
			\$${4/(.+)/\L\1/g}Params = new JRegistry;
			\$${4/(.+)/\L\1/g}Params->loadString(\$item->params);

			// Unpack readmore and layout params.
			\$item->alternative_readmore = \$${4/(.+)/\L\1/g}Params->get('alternative_readmore');
			\$item->layout = \$${4/(.+)/\L\1/g}Params->get('layout');
			\$item->params = clone \$this->getState('params');

			/*
			For blogs, ${4/(.+)/\L\1/g} params override menu item params only if menu param = 'use_${4/(.+)/\L\1/g}'.
			Otherwise, menu item params control the layout.
			If menu item is 'use_${4/(.+)/\L\1/g}' and there is no ${4/(.+)/\L\1/g} param, use global.
			*/
			if (\$input->getString('option') == 'com_${TM_COMPONENT/(.+)/\L\1/g}' && ((\$input->getString('layout') == 'blog')) || (\$this->getState('params')->get('layout_type') == 'blog'))
			{
				// Create an array of just the params set to 'use_${4/(.+)/\L\1/g}'.
				\$menuParamsArray = \$this->getState('params')->toArray();
				\$${4/(.+)/\L\1/g}Array = array();

				foreach (\$menuParamsArray as \$key => \$value)
				{
					if (\$value === 'use_${4/(.+)/\L\1/g}')
					{
						// If the ${4/(.+)/\L\1/g} has a value, use it.
						if (\$${4/(.+)/\L\1/g}Params->get(\$key) != '')
						{
							// Get the value from the ${4/(.+)/\L\1/g}.
							\$${4/(.+)/\L\1/g}Array[\$key] = \$${4/(.+)/\L\1/g}Params->get(\$key);
						}
						else
						{
							// Otherwise, use the global value.
							\$${4/(.+)/\L\1/g}Array[\$key] = \$globalParams->get(\$key);
						}
					}
				}

				// Merge the selected ${4/(.+)/\L\1/g} params.
				if (count(\$${4/(.+)/\L\1/g}Array) > 0)
				{
					\$${4/(.+)/\L\1/g}Params = new JRegistry;
					\$${4/(.+)/\L\1/g}Params->loadArray(\$${4/(.+)/\L\1/g}Array);
					\$item->params->merge(\$${4/(.+)/\L\1/g}Params);
				}
			}
			else
			{
				// For non-blog layouts, merge all of the ${4/(.+)/\L\1/g} params.
				\$item->params->merge(\$${4/(.+)/\L\1/g}Params);
			}

			// Get display date.
			switch (\$item->params->get('list_show_date'))
			{
				case 'modified':
					\$item->displayDate = \$item->modified;
					break;

				case 'published':
					\$item->displayDate = (\$item->publish_up == 0) ? \$item->created : \$item->publish_up;
					break;

				default:
				case 'created':
					\$item->displayDate = \$item->created;
					break;
			}

			// Compute the asset access permissions.
			// Technically guest could edit an ${4/(.+)/\L\1/g}, but lets not check that to improve performance a little.
			if (!\$guest)
			{
				\$asset = 'com_${TM_COMPONENT/(.+)/\L\1/g}.${4/(.+)/\L\1/g}.' . \$item->id;

				// Check general edit permission first.
				if (\$user->authorise('core.edit', \$asset))
				{
					\$item->params->set('access-edit', true);
				}

				// Now check if edit.own is available.
				elseif (!empty(\$userId) && \$user->authorise('core.edit.own', \$asset))
				{
					// Check for a valid user and that they are the owner.
					if (\$userId == \$item->created_by)
					{
						\$item->params->set('access-edit', true);
					}
				}
			}

			\$access = \$this->getState('filter.access');

			if (\$access)
			{
				// If the access filter has been set, we already have only the ${1/(.+)/\L\1/g} this user can view.
				\$item->params->set('access-view', true);
			}
			else
			{
				\$item->params->set('access-view', in_array(\$item->access, \$groups));
			}

			// Get the tags.
			\$item->tags = new JHelperTags;
			\$item->tags->getItemTags('com_${TM_COMPONENT/(.+)/\L\1/g}.${4:${1/(.+)(s\b)/\L\1/g}}', \$item->id);
		}

		return \$items;
	}

	/**
	 * Method to get the starting number of items for the data set.
	 *
	 * @return  integer  The starting number of items available in the data set.
	 *
	 * @since   $TM_VERSION
	 */
	public function getStart()
	{
		return \$this->getState('list.start');
	}
}

]]></content>
	<tabTrigger>jsitemodellist-simple</tabTrigger>
	<scope>source.php</scope>
</snippet>
