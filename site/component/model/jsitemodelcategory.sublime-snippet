<snippet>
	<content><![CDATA[/**
 * This models supports retrieving a category, the ${1/(.+)/\L\1/g} associated with the category,
 * sibling, child and parent categories.
 *
 * @package     ${TM_COMPONENT/(.+)/\u\1/g}
 * @subpackage  com_${TM_COMPONENT/(.+)/\L\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class ${TM_COMPONENT/(.+)/\u\1/g}ModelCategory extends JModelList
{
	/**
	 * Category items data.
	 *
	 * @access  protected
	 * @var     JCategoryNode
	 */
	protected \$_item = null;

	/**
	 * Array of Items.
	 *
	 * @access  protected
	 * @var     array
	 */
	protected \$_${1:${TM_PLURAL/(.+)/\L\1/g}} = null;

	/**
	 * Array of Children.
	 *
	 * @access  protected
	 * @var     array
	 */
	protected \$_children = null;

	/**
	 * Parent Category object.
	 *
	 * @access  protected
	 * @var     JCategoryNode
	 */
	protected \$_parent = null;

	/**
	 * Model context string.
	 *
	 * @access  protected
	 * @var     string
	 */
	protected \$_context = 'com_${TM_COMPONENT/(.+)/\L\1/g}.category';

	/**
	 * Pagination object
	 *
	 * @access  protected
	 * @var     object
	 */
	protected \$_pagination = null;

	/**
	 * Array of Right Sibling.
	 *
	 * @access  protected
	 * @var     array
	 */
	protected \$_rightsibling = null;

	/**
	 * Array of Right Sibling.
	 *
	 * @access  protected
	 * @var     array
	 */
	protected \$_leftsibling = null;

	/**
	 * Constructor.
	 *
	 * @param   array  \$config  An optional associative array of configuration settings.
	 *
	 * @see     JController
	 * @since   $TM_VERSION
	 */
	public function __construct(\$config = array())
	{
		if (empty(\$config['filter_fields']))
		{
			\$config['filter_fields'] = array(
				'id', 'a.id',
				'title', 'a.title',
				'alias', 'a.alias',
				'checked_out', 'a.checked_out',
				'checked_out_time', 'a.checked_out_time',
				'catid', 'a.catid', 'category_title',
				'state', 'a.state',
				'access', 'a.access', 'access_level',
				'created', 'a.created',
				'created_by', 'a.created_by',
				'modified', 'a.modified',
				'ordering', 'a.ordering',
				'featured', 'a.featured',
				'language', 'a.language',
				'hits', 'a.hits',
				'publish_up', 'a.publish_up',
				'publish_down', 'a.publish_down',
				'author', 'a.author',
			);
		}

		parent::__construct(\$config);
	}

	/**
	 * Method to auto-populate the model state.
	 *
	 * Note. Calling getState in this method will result in recursion.
	 *
	 * @param   string  \$ordering   An optional ordering field.
	 * @param   string  \$direction  An optional direction (asc|desc).
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function populateState(\$ordering = null, \$direction = null)
	{
		// Initialiase variables.
		\$app = JFactory::getApplication('site');
		\$pk  = \$app->input->getInt('id');

		\$this->setState('category.id', \$pk);

		// Load the parameters. Merge Global and Menu Item params into new object.
		\$params = \$app->getParams();
		\$menuParams = new JRegistry;

		if (\$menu = \$app->getMenu()->getActive())
		{
			\$menuParams->loadString(\$menu->params);
		}

		\$mergedParams = clone \$menuParams;
		\$mergedParams->merge(\$params);

		// Load the parameters.
		\$this->setState('params', \$mergedParams);

		// Get the current user object.
		\$user = JFactory::getUser();

		// Create a new query object.
		\$db    = \$this->getDbo();
		\$query = \$db->getQuery(true);

		if ((!\$user->authorise('core.edit.state', 'com_${TM_COMPONENT/(.+)/\L\1/g}')) &&  (!\$user->authorise('core.edit', 'com_${TM_COMPONENT/(.+)/\L\1/g}')))
		{
			// Limit to published for people who can not edit or edit.state.
			\$this->setState('filter.state', 1);

			// Filter by start and end dates.
			\$nullDate = \$db->quote(\$db->getNullDate());
			\$nowDate = \$db->quote(JFactory::getDate()->toSQL());

			\$query->where('(a.publish_up = ' . \$nullDate . ' OR a.publish_up <= ' . \$nowDate . ')')
				->where('(a.publish_down = ' . \$nullDate . ' OR a.publish_down >= ' . \$nowDate . ')');
		}
		else
		{
			\$this->setState('filter.state', array(0, 1, 2));
		}

		// Process show_noauth parameter.
		if (!\$params->get('show_noauth'))
		{
			\$this->setState('filter.access', true);
		}
		else
		{
			\$this->setState('filter.access', false);
		}

		// Optional filter text.
		\$this->setState('list.filter', \$app->input->getString('filter-search'));

		\$itemid = \$app->input->get('id', 0, 'int') . ':' . \$app->input->get('Itemid', 0, 'int');
		\$orderCol = \$app->getUserStateFromRequest('com_${TM_COMPONENT/(.+)/\L\1/g}.category.list.' . \$itemid . '.filter_order', 'filter_order', '', 'string');

		if (!in_array(\$orderCol, \$this->filter_fields))
		{
			\$orderCol = 'a.ordering';
		}

		\$this->setState('list.ordering', \$orderCol);

		\$listOrder = \$app->getUserStateFromRequest('com_${TM_COMPONENT/(.+)/\L\1/g}.category.list.' . \$itemid . '.filter_order_Dir', 'filter_order_Dir', '', 'cmd');

		if (!in_array(strtoupper(\$listOrder), array('ASC', 'DESC', '')))
		{
			\$listOrder = 'ASC';
		}

		\$this->setState('list.direction', \$listOrder);

		\$this->setState('list.start', \$app->input->get('limitstart', 0, 'uint'));

		// Set limit for query. If list, use parameter. If ${3/(.+)/\L\1/g}, add ${3/(.+)/\L\1/g} parameters for limit.
		if ((\$app->input->get('layout') == '${3:blog}') || \$params->get('layout_type') == '${3/(.+)/\L\1/g}')
		{
			\$limit = \$params->get('num_leading_${1/(.+)/\L\1/g}') + \$params->get('num_intro_${1/(.+)/\L\1/g}') + \$params->get('num_links');
			\$this->setState('list.links', \$params->get('num_links'));
		}
		else
		{
			\$limit = \$app->getUserStateFromRequest('com_${TM_COMPONENT/(.+)/\L\1/g}.category.list.' . \$itemid . '.limit', 'limit', \$params->get('display_num'), 'uint');
		}

		\$this->setState('list.limit', \$limit);

		// Set the depth of the category query based on parameter.
		\$showSubcategories = \$params->get('show_subcategory_${2/(.+)/\L\1/g}', '0');

		if (\$showSubcategories)
		{
			\$this->setState('filter.max_category_levels', \$params->get('show_subcategory_${2/(.+)/\L\1/g}', '1'));
			\$this->setState('filter.subcategories', true);
		}

		\$this->setState('filter.language', JLanguageMultilang::isEnabled());

		\$this->setState('layout', \$app->input->getString('layout'));
	}

	/**
	 * Get the ${1/(.+)/\L\1/g} in the category
	 *
	 * @return  mixed  An array of ${1/(.+)/\L\1/g} or false if an error occurs.
	 *
	 * @since   $TM_VERSION
	 */
	function getItems()
	{
		// Initialiase variables.
		\$limit = \$this->getState('list.limit');

		if (\$this->_${1/(.+)/\L\1/g} === null && \$category = \$this->getCategory())
		{
			\$model = JModelLegacy::getInstance('${1/(.+)/\u\1/g}', '${TM_COMPONENT/(.+)/\u\1/g}Model', array('ignore_request' => true));
			\$model->setState('params', JFactory::getApplication()->getParams());
			\$model->setState('filter.category_id', \$category->id);
			\$model->setState('filter.state', \$this->getState('filter.state'));
			\$model->setState('filter.access', \$this->getState('filter.access'));
			\$model->setState('filter.language', \$this->getState('filter.language'));
			\$model->setState('list.ordering', \$this->_build${4/(.+)/\u\1/g}OrderBy());
			\$model->setState('list.start', \$this->getState('list.start'));
			\$model->setState('list.limit', \$limit);
			\$model->setState('list.direction', \$this->getState('list.direction'));
			\$model->setState('list.filter', \$this->getState('list.filter'));

			// The filter.subcategories indicates whether to include ${1/(.+)/\L\1/g} from subcategories in the list or ${3/(.+)/\L\1/g}.
			\$model->setState('filter.subcategories', \$this->getState('filter.subcategories'));
			\$model->setState('filter.max_category_levels', \$this->setState('filter.max_category_levels'));
			\$model->setState('list.links', \$this->getState('list.links'));

			if (\$limit >= 0)
			{
				\$this->_${1/(.+)/\L\1/g} = \$model->getItems();

				if (\$this->_${1/(.+)/\L\1/g} === false)
				{
					\$this->setError(\$model->getError());
				}
			}
			else
			{
				\$this->_${1/(.+)/\L\1/g} = array();
			}

			\$this->_pagination = \$model->getPagination();
		}

		return \$this->_${1/(.+)/\L\1/g};
	}

	/**
	 * Build the orderby for the query
	 *
	 * @return  string  \$orderby portion of query.
	 *
	 * @since   $TM_VERSION
	 */
	protected function _build${4:${2/(.+)/\u\1/g}}OrderBy()
	{
		// Initialiase variables.
		\$app       = JFactory::getApplication('site');
		\$db        = \$this->getDbo();
		\$params    = \$this->state->params;
		\$itemid    = \$app->input->get('id', 0, 'int') . ':' . \$app->input->get('Itemid', 0, 'int');
		\$orderCol  = \$app->getUserStateFromRequest('com_${TM_COMPONENT/(.+)/\L\1/g}.category.list.' . \$itemid . '.filter_order', 'filter_order', '', 'string');
		\$orderDirn = \$app->getUserStateFromRequest('com_${TM_COMPONENT/(.+)/\L\1/g}.category.list.' . \$itemid . '.filter_order_Dir', 'filter_order_Dir', '', 'cmd');
		\$orderby   = ' ';

		if (!in_array(\$orderCol, \$this->filter_fields))
		{
			\$orderCol = null;
		}

		if (!in_array(strtoupper(\$orderDirn), array('ASC', 'DESC', '')))
		{
			\$orderDirn = 'ASC';
		}

		if (\$orderCol && \$orderDirn)
		{
			\$orderby .= \$db->escape(\$orderCol) . ' ' . \$db->escape(\$orderDirn) . ', ';
		}

		\$${2:${TM_SINGULAR/(.+)/\L\1/g}}Orderby      = \$params->get('orderby_sec', 'rdate');
		\$${2/(.+)/\L\1/g}OrderDate    = \$params->get('order_date');
		\$categoryOrderby = \$params->def('orderby_pri', '');
		\$secondary       = ${TM_COMPONENT/(.+)/\u\1/g}HelperQuery::orderbySecondary(\$${2/(.+)/\L\1/g}Orderby, \$${2/(.+)/\L\1/g}OrderDate) . ', ';
		\$primary         = ${TM_COMPONENT/(.+)/\u\1/g}HelperQuery::orderbyPrimary(\$categoryOrderby);

		\$orderby .= \$primary . ' ' . \$secondary . ' a.created ';

		return \$orderby;
	}

	/**
	 * Method to get a JPagination object for the data set.
	 *
	 * @return  JPagination  A JPagination object for the data set.
	 *
	 * @since   $TM_VERSION
	 */
	public function getPagination()
	{
		if (empty(\$this->_pagination))
		{
			return null;
		}

		return \$this->_pagination;
	}

	/**
	 * Method to get category data for the current category.
	 *
	 * @return  object
	 *
	 * @since   $TM_VERSION
	 */
	public function getCategory()
	{
		if (!is_object(\$this->_item))
		{
			if (isset(\$this->state->params))
			{
				\$params  = \$this->state->params;
				\$options = array();
				\$options['countItems'] = \$params->get('show_cat_num_${1/(.+)/\L\1/g}', 1) || !\$params->get('show_empty_categories_cat', 0);
			}
			else
			{
				\$options['countItems'] = 0;
			}

			\$categories  = JCategories::getInstance('${TM_COMPONENT/(.+)/\u\1/g}', \$options);
			\$this->_item = \$categories->get(\$this->getState('category.id', 'root'));

			// Compute selected asset permissions.
			if (is_object(\$this->_item))
			{
				// Get the current user object.
				\$user  = JFactory::getUser();

				\$asset = 'com_${TM_COMPONENT/(.+)/\L\1/g}.category.' . \$this->_item->id;

				// Check general create permission.
				if (\$user->authorise('core.create', \$asset))
				{
					\$this->_item->getParams()->set('access-create', true);
				}

				// TODO: Why are not we lazy loading the children and siblings?
				\$this->_children = \$this->_item->getChildren();
				\$this->_parent   = false;

				if (\$this->_item->getParent())
				{
					\$this->_parent = \$this->_item->getParent();
				}

				\$this->_rightsibling = \$this->_item->getSibling();
				\$this->_leftsibling  = \$this->_item->getSibling(false);
			}
			else
			{
				\$this->_children = false;
				\$this->_parent   = false;
			}
		}

		return \$this->_item;
	}

	/**
	 * Get the parent category.
	 *
	 * @return  mixed  An array of categories or false if an error occurs.
	 *
	 * @since   $TM_VERSION
	 */
	public function getParent()
	{
		if (!is_object(\$this->_item))
		{
			\$this->getCategory();
		}

		return \$this->_parent;
	}

	/**
	 * Get the left sibling (adjacent) categories.
	 *
	 * @return  mixed  An array of categories or false if an error occurs.
	 *
	 * @since   $TM_VERSION
	 */
	function &getLeftSibling()
	{
		if (!is_object(\$this->_item))
		{
			\$this->getCategory();
		}

		return \$this->_leftsibling;
	}

	/**
	 * Get the right sibling (adjacent) categories.
	 *
	 * @return  mixed  An array of categories or false if an error occurs.
	 *
	 * @since   $TM_VERSION
	 */
	function &getRightSibling()
	{
		if (!is_object(\$this->_item))
		{
			\$this->getCategory();
		}

		return \$this->_rightsibling;
	}

	/**
	 * Get the child categories.
	 *
	 * @return  mixed  An array of categories or false if an error occurs.
	 *
	 * @since   $TM_VERSION
	 */
	function &getChildren()
	{
		if (!is_object(\$this->_item))
		{
			\$this->getCategory();
		}

		// Order subcategories.
		if (count(\$this->_children))
		{
			\$params = \$this->getState()->get('params');

			if (\$params->get('orderby_pri') == 'alpha' || \$params->get('orderby_pri') == 'ralpha')
			{
				jimport('joomla.utilities.arrayhelper');

				JArrayHelper::sortObjects(\$this->_children, 'title', (\$params->get('orderby_pri') == 'alpha') ? 1 : - 1);
			}
		}

		return \$this->_children;
	}

	/**
	 * Increment the hit counter for the category.
	 *
	 * @param   int  \$pk  Optional primary key of the category to increment.
	 *
	 * @return  boolean True if successful; false otherwise and internal error set.
	 *
	 * @since   $TM_VERSION
	 */
	public function hit(\$pk = 0)
	{
		// Initialise variables.
		\$input    = JFactory::getApplication()->input;
		\$hitcount = \$input->getInt('hitcount', 1);

		if (\$hitcount)
		{
			\$pk = (!empty(\$pk)) ? \$pk : (int) \$this->getState('category.id');

			\$table = JTable::getInstance('Category', 'JTable');
			\$table->load(\$pk);
			\$table->hit(\$pk);
		}

		return true;
	}
}

]]></content>
	<tabTrigger>jsitemodelcategory</tabTrigger>
	<scope>source.php</scope>
</snippet>
