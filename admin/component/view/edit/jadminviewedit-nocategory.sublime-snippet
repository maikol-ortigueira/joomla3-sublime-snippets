<snippet>
	<content><![CDATA[/**
 * View to edit a ${2/(.+)/\L\1/g}.
 *
 * @package     ${1/(.+)/\u\1/g}
 * @subpackage  com_${1:${TM_COMPONENT/(.+)/\L\1/g}}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
class ${1/(.+)/\u\1/g}View${2:${TM_SINGULAR/(.+)/\u\1/g}} extends JViewLegacy
{
	/**
	 * The form to use for the view.
	 *
	 * @var     JForm
	 */
	protected \$form;

	/**
	 * The item to edit.
	 *
	 * @var     JObject
	 */
	protected \$item;

	/**
	 * The model state.
	 *
	 * @var     JObject
	 */
	protected \$state;

	/**
	 * Method to display the view.
	 *
	 * @param   string  \$tpl  A template file to load. [optional]
	 *
	 * @return  mixed  A string if successful, otherwise a JError object.
	 *
	 * @since   $TM_VERSION
	 */
	public function display(\$tpl = null)
	{
		try
		{
			// Initialiase variables.
			\$this->form  = \$this->get('Form');
			\$this->item  = \$this->get('Item');
			\$this->state = \$this->get('State');
			\$this->canDo = ${3:${2/(.+)/\u\1/g}s}Helper::getActions(0, 'com_${1/(.+)/\L\1/g}');
		}
		catch (Exception \$e)
		{
			JErrorPage::render(\$e);

			return false;
		}

		if (\$this->getLayout() == 'modal')
		{
			\$this->form->setFieldAttribute('language', 'readonly', 'true');
		}

		\$this->addToolbar();

		parent::display(\$tpl);
	}

	/**
	 * Add the page title and toolbar.
	 *
	 * @return  void
	 *
	 * @since   $TM_VERSION
	 */
	protected function addToolbar()
	{
		JFactory::getApplication()->input->set('hidemainmenu', true);

		// Initialiase variables.
		\$user       = JFactory::getUser();
		\$userId     = \$user->get('id');
		\$isNew      = (\$this->item->id == 0);
		\$checkedOut = !(\$this->item->checked_out == 0 || \$this->item->checked_out == \$userId);

		// Since we do not track these assets at the item level.
		\$canDo      = \$this->canDo;

		JToolbarHelper::title(JText::_('COM_${1/(.+)/\U\1/g}_PAGE_' . (\$checkedOut ? 'VIEW_${2/(.+)/\U\1/g}' : (\$isNew ? 'ADD_${2/(.+)/\U\1/g}' : 'EDIT_${2/(.+)/\U\1/g}'))), 'pencil-2 ${2/(.+)/\L\1/g}-add');

		// Built the actions for new and existing records.
		// For new records, check the create permission.
		if (\$isNew)
		{
			JToolbarHelper::apply('${2/(.+)/\L\1/g}.apply');
			JToolbarHelper::save('${2/(.+)/\L\1/g}.save');
			JToolbarHelper::save2new('${2/(.+)/\L\1/g}.save2new');
			JToolbarHelper::cancel('${2/(.+)/\L\1/g}.cancel');
		}
		else
		{
			// Can not save the record if it's checked out.
			if (!\$checkedOut)
			{
				// Since it's an existing record, check the edit permission, or fall back to edit own if the owner.
				if (\$canDo->get('core.edit') || (\$canDo->get('core.edit.own') && \$this->item->created_by == \$userId))
				{
					JToolbarHelper::apply('${2/(.+)/\L\1/g}.apply');
					JToolbarHelper::save('${2/(.+)/\L\1/g}.save');

					// We can save this record, but check the create permission to see if we can return to make a new one.
					if (\$canDo->get('core.create'))
					{
						JToolbarHelper::save2new('${2/(.+)/\L\1/g}.save2new');
					}
				}
			}

			// If checked out, we can still save.
			if (\$canDo->get('core.create'))
			{
				JToolbarHelper::save2copy('${2/(.+)/\L\1/g}.save2copy');
			}

			if (\$this->state->params->get('save_history', 1) && \$user->authorise('core.edit'))
			{
				JToolbarHelper::versions('com_${1/(.+)/\L\1/g}.${2/(.+)/\L\1/g}', \$this->item->id);
			}

			JToolbarHelper::cancel('${2/(.+)/\L\1/g}.cancel', 'JTOOLBAR_CLOSE');
		}

		JToolBarHelper::help('${2/(.+)/\L\1/g}', \$com = true);
	}
}

]]></content>
	<tabTrigger>jadminviewedit-nocategory</tabTrigger>
	<scope>source.php</scope>
</snippet>
