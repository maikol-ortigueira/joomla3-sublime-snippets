<snippet>
	<content><![CDATA[// Include dependancies.
JModelLegacy::addIncludePath(JPATH_ADMINISTRATOR . '/components/com_${TM_COMPONENT/(.+)/\L\1/g}/models', '${TM_COMPONENT/(.+)/\u\1/g}Model');

/**
 * Helper for mod_${TM_MODULE/(.+)/\L\1/g}.
 *
 * @package     ${TM_MODULE/(.+)/\u\1/g}
 * @subpackage  mod_${TM_MODULE/(.+)/\L\1/g}
 * @author      $TM_FULLNAME <$TM_EMAIL>
 * @since       $TM_VERSION
 */
abstract class Mod${1:${TM_MODULE/(\_+)//g}}Helper
{
	/**
	 * Get a list of ${2/(.+)/\L\1/g}.
	 *
	 * @param   JObject  \$params  The module parameters.
	 *
	 * @return  mixed  An array of ${2/(.+)/\L\1/g}, or false on error.
	 *
	 * @since   $TM_VERSION
	 */
	public static function getList(\$params)
	{
		// Get the current user object.
		\$user = JFactory::getUser();

		// Get an instance of the generic ${2/(.+)/\L\1/g} model.
		\$model = JModelLegacy::getInstance('${2:${TM_PLURAL/(.+)/\u\1/g}}', '${TM_COMPONENT/(.+)/\u\1/g}Model', array('ignore_request' => true));

		// Set List SELECT.
		\$model->setState('list.select', 'a.id, a.${3:title}, a.checked_out, a.checked_out_time' .
				', a.access, a.created, a.created_by, a.created_by_alias, a.featured, a.state');

		// Set Ordering filter.
		switch (\$params->get('ordering'))
		{
			case 'm_dsc':
				\$model->setState('list.ordering', 'modified DESC, created');
				\$model->setState('list.direction', 'DESC');
				break;

			case 'c_dsc':
			default:
				\$model->setState('list.ordering', 'created');
				\$model->setState('list.direction', 'DESC');
				break;
		}

		// Set Category Filter.
		\$categoryId = \$params->get('catid');

		if (is_numeric(\$categoryId))
		{
			\$model->setState('filter.category_id', \$categoryId);
		}

		// Set User Filter.
		\$userId = \$user->get('id');

		switch (\$params->get('user_id'))
		{
			case 'by_me':
				\$model->setState('filter.author_id', \$userId);
				break;

			case 'not_me':
				\$model->setState('filter.author_id', \$userId);
				\$model->setState('filter.author_id.include', false);
				break;
		}

		// Set the Start and Limit.
		\$model->setState('list.start', 0);
		\$model->setState('list.limit', \$params->get('count', 5));

		\$items = \$model->getItems();

		if (\$error = \$model->getError())
		{
			JError::raiseError(500, \$error);

			return false;
		}

		// Set the links.
		foreach (\$items as &\$item)
		{
			if (\$user->authorise('core.edit', 'com_${TM_COMPONENT/(.+)/\L\1/g}.${4:${2/(.+)(s\b)/\L\1/g}}.' . \$item->id))
			{
				\$item->link = JRoute::_('index.php?option=com_${TM_COMPONENT/(.+)/\L\1/g}&task=${4/(.+)/\L\1/g}.edit&id=' . \$item->id);
			}
			else
			{
				\$item->link = '';
			}
		}

		return \$items;
	}

	/**
	 * Get the alternate title for the module.
	 *
	 * @param   JObject  \$params  The module parameters.
	 *
	 * @return  string  The alternate title for the module.
	 *
	 * @since   $TM_VERSION
	 */
	public static function getTitle(\$params)
	{
		// Initialiase variables.
		\$who   = \$params->get('user_id');
		\$catid = (int) \$params->get('catid');
		\$type  = \$params->get('ordering') == 'c_dsc' ? '_CREATED' : '_MODIFIED';

		if (\$catid)
		{
			\$category = JCategories::getInstance('${TM_COMPONENT/(.+)/\u\1/g}')->get(\$catid);

			if (\$category)
			{
				\$title = \$category->title;
			}
			else
			{
				\$title = JText::_('MOD_${1/(.+)/\U\1/g}_UNEXISTING');
			}
		}
		else
		{
			\$title = '';
		}

		return JText::plural('MOD_${1/(.+)/\U\1/g}_TITLE' . \$type . (\$catid ? "_CATEGORY" : '') . (\$who != '0' ? "_\$who" : ''), (int) \$params->get('count'), \$title);
	}
}

]]></content>
	<tabTrigger>jadminmodulehelper-advanced</tabTrigger>
	<scope>source.php</scope>
</snippet>
